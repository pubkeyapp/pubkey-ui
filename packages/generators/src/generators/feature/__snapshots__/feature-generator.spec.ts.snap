// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`feature generator should create files for demo 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": {",
      ""build": { "cache": true },",
      ""lint": { "cache": true },",
      ""e2e": { "cache": true }",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "demo-feature-alerts.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import {",
          "UiAlert,",
          "UiCard,",
          "UiError,",
          "UiInfo,",
          "UiSuccess,",
          "UiWarning,",
          "} from '@pubkey-ui/core';",
          "export function DemoFeatureAlerts() {",
          "return (",
          "<UiCard title="Alerts">",
          "<SimpleGrid cols={2}>",
          "<UiError title="Error" message="Hello World" />",
          "<UiInfo title="Info" message="Hello World" />",
          "<UiSuccess title="Success" message="Hello World" />",
          "<UiWarning title="Warning" message="Hello World" />",
          "<UiAlert title="Alert" message="Hello World" />",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-alerts.tsx",
      },
      "demo-feature-card.tsx": {
        "content": [
          "import { UiCard, UiStack } from '@pubkey-ui/core';",
          "export function DemoFeatureCard() {",
          "return (",
          "<UiStack>",
          "<UiCard title="Default Card">CARD CONTENT</UiCard>",
          "<UiCard withBorder title="Card" shadow="lg">",
          "CARD CONTENT",
          "</UiCard>",
          "</UiStack>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-card.tsx",
      },
      "demo-feature-copy.tsx": {
        "content": [
          "import { UiCard, UiCopy, UiStack } from '@pubkey-ui/core';",
          "export function DemoFeatureCopy() {",
          "return (",
          "<UiCard title="Copy">",
          "<UiStack>",
          "<UiCopy text="Hello PubKey UI" />",
          "</UiStack>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-copy.tsx",
      },
      "demo-feature-debug.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiDebug, UiDebugModal } from '@pubkey-ui/core';",
          "export function DemoFeatureDebug() {",
          "return (",
          "<UiCard title="Debug">",
          "<SimpleGrid cols={2}>",
          "<UiDebug data={{ foo: 'bar' }} open hideButton />",
          "<UiDebug data={{ foo: 'bar' }} />",
          "<UiDebug data={{ foo: 'bar' }} open />",
          "<UiDebugModal data={{ foo: 'bar' }} />",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-debug.tsx",
      },
      "demo-feature-group.tsx": {
        "content": [
          "import { Button, SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiGroup } from '@pubkey-ui/core';",
          "export function DemoFeatureGroup() {",
          "return (",
          "<UiCard title="Group">",
          "<SimpleGrid cols={2}>",
          "<UiGroup justify="space-between">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "<UiGroup gap="xs">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "<UiGroup gap="sm">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "<UiGroup gap="md">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "<UiGroup gap="lg">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "<UiGroup gap="xl">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiGroup>",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-group.tsx",
      },
      "demo-feature-header.tsx": {
        "content": [
          "import { ActionIcon, Avatar, Button, Group, rem, Text } from '@mantine/core';",
          "import { useDisclosure } from '@mantine/hooks';",
          "import {",
          "UiCard,",
          "UiHeader,",
          "UiMenu,",
          "UiSearchInput,",
          "UiStack,",
          "} from '@pubkey-ui/core';",
          "import {",
          "IconDoorExit,",
          "IconLetterP,",
          "IconMessageCircle,",
          "IconPhoto,",
          "IconSearch,",
          "IconSettings,",
          "IconUser,",
          "IconUserCog,",
          "} from '@tabler/icons-react';",
          "import { useState } from 'react';",
          "import { Route, Routes } from 'react-router-dom';",
          "export function DemoFeatureHeader() {",
          "const [opened, { toggle }] = useDisclosure(false);",
          "const [signedIn, setSignedIn] = useState(false);",
          "return (",
          "<UiCard title="Header">",
          "<UiStack gap="xl">",
          "<UiHeader",
          "base="/demo/header"",
          "opened={opened}",
          "toggle={toggle}",
          "links={[",
          "{ link: '/demo/header/about', label: 'Features' },",
          "{ link: '/demo/header/pricing', label: 'Pricing' },",
          "{ link: '/demo/header/learn', label: 'Learn' },",
          "]}",
          "profile={<UiSearchInput text={{ size: 'sm' }} />}",
          "/>",
          "<UiHeader",
          "profile={",
          "<ActionIcon radius="xl" size="lg" variant="light">",
          "<IconSearch",
          "style={{ width: rem(16), height: rem(16) }}",
          "stroke={1.5}",
          "/>",
          "</ActionIcon>",
          "}",
          "/>",
          "<UiHeader",
          "base="/demo/header"",
          "logo={",
          "<Group gap={6}>",
          "<IconLetterP size={28} />",
          "<Text size="xl" fw="bold">",
          "PubKey",
          "</Text>",
          "</Group>",
          "}",
          "logoSmall={<IconLetterP size={28} />}",
          "/>",
          "<UiHeader",
          "profile={",
          "<Group gap="xs">",
          "{signedIn ? (",
          "<UiMenu",
          "position="bottom-end"",
          "withArrow",
          "arrowOffset={14}",
          "icon={",
          "<Avatar",
          "src="https://avatars.githubusercontent.com/u/36491?v=4"",
          "size={32}",
          ">",
          "<IconUser />",
          "</Avatar>",
          "}",
          "items={[",
          "{ label: 'Application', type: 'label' },",
          "{",
          "label: 'Settings',",
          "type: 'item',",
          "leftSection: (",
          "<IconSettings",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "},",
          "{",
          "label: 'Messages',",
          "type: 'item',",
          "leftSection: (",
          "<IconMessageCircle",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "},",
          "{",
          "label: 'Gallery',",
          "type: 'item',",
          "leftSection: (",
          "<IconPhoto",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "},",
          "{",
          "label: 'Search',",
          "type: 'item',",
          "leftSection: (",
          "<IconSearch",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "rightSection: (",
          "<Text size="xs" c="dimmed">",
          "âŒ˜K",
          "</Text>",
          "),",
          "},",
          "{",
          "label: 'Account',",
          "type: 'label',",
          "},",
          "{",
          "label: 'Profile',",
          "type: 'item',",
          "leftSection: (",
          "<IconUserCog",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "},",
          "{",
          "label: 'Sign out',",
          "type: 'item',",
          "leftSection: (",
          "<IconDoorExit",
          "style={{ width: rem(14), height: rem(14) }}",
          "/>",
          "),",
          "onClick: () => setSignedIn(false),",
          "},",
          "]}",
          "/>",
          ") : (",
          "<Button",
          "size="sm"",
          "variant="light"",
          "onClick={() => setSignedIn(true)}",
          ">",
          "Sign in",
          "</Button>",
          ")}",
          "</Group>",
          "}",
          "/>",
          "<UiStack hiddenFrom="md">",
          "{opened ? (",
          "<Button onClick={toggle}>Close menu</Button>",
          ") : (",
          "<Button variant="light" onClick={toggle}>",
          "Open menu",
          "</Button>",
          ")}",
          "</UiStack>",
          "<Routes>",
          "<Route path="about" element={<div>About</div>} />",
          "<Route path="pricing" element={<div>Pricing</div>} />",
          "<Route path="learn" element={<div>Learn</div>} />",
          "</Routes>",
          "</UiStack>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-header.tsx",
      },
      "demo-feature-logo.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import {",
          "UiCard,",
          "UiGroup,",
          "UiLogo,",
          "UiLogoType,",
          "UiLogoTypeBlack,",
          "UiLogoTypeWhite,",
          "UiStack,",
          "UiThemeSwitch,",
          "} from '@pubkey-ui/core';",
          "export function DemoFeatureLogo() {",
          "return (",
          "<UiCard title="Logo and LogoType">",
          "<SimpleGrid cols={2}>",
          "<UiStack align="center">",
          "<UiLogo height={64} />",
          "</UiStack>",
          "<UiStack align="center">",
          "<UiLogo height={128} />",
          "</UiStack>",
          "<UiStack align="center">",
          "<UiLogoTypeBlack height={64} />",
          "</UiStack>",
          "<UiStack align="center">",
          "<UiLogoTypeWhite height={64} />",
          "</UiStack>",
          "<UiStack align="center">",
          "<UiLogoType height={64} />",
          "</UiStack>",
          "<UiGroup>",
          "<UiStack align="center">",
          "<span>Toggle the theme to see the logo change color.</span>",
          "<UiThemeSwitch />",
          "</UiStack>",
          "</UiGroup>",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-logo.tsx",
      },
      "demo-feature-menu.tsx": {
        "content": [
          "import { Avatar, rem, Text } from '@mantine/core';",
          "import {",
          "UiCard,",
          "UiGroup,",
          "UiMenu,",
          "UiMenuItem,",
          "useUiColorScheme,",
          "} from '@pubkey-ui/core';",
          "import {",
          "IconDoorExit,",
          "IconMessageCircle,",
          "IconMoon,",
          "IconPhoto,",
          "IconSearch,",
          "IconSettings,",
          "IconSun,",
          "IconUser,",
          "IconUserCog,",
          "} from '@tabler/icons-react';",
          "import { ReactNode } from 'react';",
          "export function DemoFeatureMenu() {",
          "const { colorScheme, toggleColorScheme } = useUiColorScheme();",
          "const icon: ReactNode = (",
          "<Avatar src="https://avatars.githubusercontent.com/u/36491?v=4" size={32}>",
          "<IconUser />",
          "</Avatar>",
          ");",
          "const items: UiMenuItem[] = [",
          "{ label: 'Application', type: 'label' },",
          "{",
          "label: 'Settings',",
          "type: 'item',",
          "leftSection: <IconSettings style={{ width: rem(14), height: rem(14) }} />,",
          "},",
          "{",
          "label: 'Messages',",
          "type: 'item',",
          "leftSection: (",
          "<IconMessageCircle style={{ width: rem(14), height: rem(14) }} />",
          "),",
          "},",
          "{",
          "label: 'Gallery',",
          "type: 'item',",
          "leftSection: <IconPhoto style={{ width: rem(14), height: rem(14) }} />,",
          "},",
          "{",
          "label: 'Search',",
          "type: 'item',",
          "leftSection: <IconSearch style={{ width: rem(14), height: rem(14) }} />,",
          "rightSection: (",
          "<Text size="xs" c="dimmed">",
          "âŒ˜K",
          "</Text>",
          "),",
          "},",
          "{",
          "label: \`\${colorScheme === 'dark' ? 'Light' : 'Dark'} theme\`,",
          "type: 'item',",
          "leftSection:",
          "colorScheme === 'dark' ? (",
          "<IconSun style={{ width: rem(14), height: rem(14) }} />",
          ") : (",
          "<IconMoon style={{ width: rem(14), height: rem(14) }} />",
          "),",
          "onClick: () => toggleColorScheme(),",
          "},",
          "{",
          "label: 'Account',",
          "type: 'label',",
          "},",
          "{",
          "label: 'Profile',",
          "type: 'item',",
          "leftSection: <IconUserCog style={{ width: rem(14), height: rem(14) }} />,",
          "},",
          "{",
          "label: 'Sign out',",
          "type: 'item',",
          "leftSection: <IconDoorExit style={{ width: rem(14), height: rem(14) }} />,",
          "},",
          "];",
          "return (",
          "<UiCard title="Menu">",
          "<UiGroup justify="space-between">",
          "<UiMenu icon={icon} items={items} />",
          "<UiMenu icon={icon} items={items} position="bottom-end" />",
          "</UiGroup>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-menu.tsx",
      },
      "demo-feature-search-input.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiGroup, UiSearchInput, UiStack } from '@pubkey-ui/core';",
          "export function DemoFeatureSearchInput() {",
          "return (",
          "<UiCard title="SearchInput">",
          "<UiStack>",
          "<SimpleGrid cols={2}>",
          "<UiSearchInput />",
          "<UiSearchInput icon={{ radius: 0 }} text={{ radius: 0 }} />",
          "</SimpleGrid>",
          "<UiSearchInput />",
          "<UiGroup>",
          "<UiSearchInput />",
          "<UiSearchInput />",
          "<UiSearchInput />",
          "<UiSearchInput />",
          "</UiGroup>",
          "</UiStack>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-search-input.tsx",
      },
      "demo-feature-stack.tsx": {
        "content": [
          "import { Button, SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiStack } from '@pubkey-ui/core';",
          "export function DemoFeatureStack() {",
          "return (",
          "<UiCard title="Stack">",
          "<SimpleGrid cols={2}>",
          "<UiStack justify="space-between">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "<UiStack gap="xs">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "<UiStack gap="sm">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "<UiStack gap="md">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "<UiStack gap="lg">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "<UiStack gap="xl">",
          "<Button>Save</Button> <Button variant="default">Cancel</Button>",
          "</UiStack>",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-stack.tsx",
      },
      "demo-feature-tab-routes.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiTabRoutes } from '@pubkey-ui/core';",
          "export function DemoFeatureTabRoutes() {",
          "return (",
          "<UiCard title="Tab Routes">",
          "<UiTabRoutes",
          "baseUrl="/demo/tab-routes"",
          "tabs={[",
          "{",
          "value: 'overview',",
          "label: 'Overview',",
          "component: (",
          "<SimpleGrid cols={2} spacing="md">",
          "<UiCard title="Overview">Overview</UiCard>",
          "</SimpleGrid>",
          "),",
          "},",
          "{",
          "value: 'content',",
          "label: 'Content',",
          "component: (",
          "<SimpleGrid cols={2} spacing="md">",
          "<UiCard title="Content">Content</UiCard>",
          "</SimpleGrid>",
          "),",
          "},",
          "{",
          "value: 'settings',",
          "label: 'Settings',",
          "component: (",
          "<SimpleGrid cols={2} spacing="md">",
          "<UiCard title="Settings">Settings</UiCard>",
          "</SimpleGrid>",
          "),",
          "},",
          "]}",
          "/>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-tab-routes.tsx",
      },
      "demo-feature-time.tsx": {
        "content": [
          "import { SimpleGrid } from '@mantine/core';",
          "import { UiCard, UiTime } from '@pubkey-ui/core';",
          "export function DemoFeatureTime() {",
          "return (",
          "<UiCard title="Time">",
          "<SimpleGrid cols={2}>",
          "<UiTime",
          "date={new Date(new Date().setMonth(new Date().getMonth() - 1))}",
          "/>",
          "<UiTime date={new Date(new Date().setDate(new Date().getDate() - 7))} />",
          "<UiTime date={new Date(new Date().setDate(new Date().getDate() - 2))} />",
          "<UiTime date={new Date(new Date().setDate(new Date().getDate() - 1))} />",
          "<UiTime date={new Date()} />",
          "<UiTime date={new Date(new Date().setDate(new Date().getDate() + 1))} />",
          "<UiTime date={new Date(new Date().setDate(new Date().getDate() + 7))} />",
          "<UiTime",
          "date={new Date(new Date().setMonth(new Date().getMonth() + 1))}",
          "/>",
          "<UiTime",
          "date={new Date(new Date().setFullYear(new Date().getFullYear() + 1))}",
          "/>",
          "<UiTime date={new Date('2021-01-01')} />",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-time.tsx",
      },
      "demo-feature-toast.tsx": {
        "content": [
          "import { Button, SimpleGrid } from '@mantine/core';",
          "import {",
          "UiCard,",
          "toastError,",
          "toastInfo,",
          "toastSuccess,",
          "toastWarning,",
          "} from '@pubkey-ui/core';",
          "export function DemoFeatureToast() {",
          "return (",
          "<UiCard title="Toast">",
          "<SimpleGrid cols={2}>",
          "<Button",
          "color="green"",
          "onClick={() => toastSuccess('This is a success toast')}",
          ">",
          "Toast Success",
          "</Button>",
          "<Button",
          "color="red"",
          "onClick={() => toastError('This is an error toast')}",
          ">",
          "Toast Error",
          "</Button>",
          "<Button",
          "color="yellow"",
          "onClick={() => toastWarning('This is a warning toast')}",
          ">",
          "Toast Warning",
          "</Button>",
          "<Button color="cyan" onClick={() => toastInfo('This is an info toast')}>",
          "Toast Info",
          "</Button>",
          "</SimpleGrid>",
          "</UiCard>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature-toast.tsx",
      },
      "demo-feature.tsx": {
        "content": [
          "import { Grid, NavLink } from '@mantine/core';",
          "import { UiContainer, UiStack } from '@pubkey-ui/core';",
          "import { ReactNode } from 'react';",
          "import { Link, Navigate, useLocation, useRoutes } from 'react-router-dom';",
          "import { DemoFeatureAlerts } from './demo-feature-alerts';",
          "import { DemoFeatureCard } from './demo-feature-card';",
          "import { DemoFeatureCopy } from './demo-feature-copy';",
          "import { DemoFeatureDebug } from './demo-feature-debug';",
          "import { DemoFeatureGroup } from './demo-feature-group';",
          "import { DemoFeatureHeader } from './demo-feature-header';",
          "import { DemoFeatureLogo } from './demo-feature-logo';",
          "import { DemoFeatureMenu } from './demo-feature-menu';",
          "import { DemoFeatureSearchInput } from './demo-feature-search-input';",
          "import { DemoFeatureStack } from './demo-feature-stack';",
          "import { DemoFeatureTabRoutes } from './demo-feature-tab-routes';",
          "import { DemoFeatureTime } from './demo-feature-time';",
          "import { DemoFeatureToast } from './demo-feature-toast';",
          "export function DemoFeature() {",
          "const { pathname } = useLocation();",
          "const demos: {",
          "path: string;",
          "label: string;",
          "element: ReactNode;",
          "}[] = [",
          "{ path: 'alerts', label: 'Alerts', element: <DemoFeatureAlerts /> },",
          "{ path: 'card', label: 'Card', element: <DemoFeatureCard /> },",
          "{ path: 'copy', label: 'Copy', element: <DemoFeatureCopy /> },",
          "{ path: 'debug', label: 'Debug', element: <DemoFeatureDebug /> },",
          "{ path: 'group', label: 'Group', element: <DemoFeatureGroup /> },",
          "{ path: 'header', label: 'Header', element: <DemoFeatureHeader /> },",
          "{ path: 'logo', label: 'Logo', element: <DemoFeatureLogo /> },",
          "{ path: 'menu', label: 'Menu', element: <DemoFeatureMenu /> },",
          "{",
          "path: 'search-input',",
          "label: 'Search Input',",
          "element: <DemoFeatureSearchInput />,",
          "},",
          "{ path: 'stack', label: 'Stack', element: <DemoFeatureStack /> },",
          "{",
          "path: 'tab-routes',",
          "label: 'Tab Routes',",
          "element: <DemoFeatureTabRoutes />,",
          "},",
          "{ path: 'time', label: 'Time', element: <DemoFeatureTime /> },",
          "{ path: 'toast', label: 'Toast', element: <DemoFeatureToast /> },",
          "];",
          "const routes = useRoutes([",
          "{ index: true, element: <Navigate to={demos[0].path} replace /> },",
          "...demos.map((demo) => ({ path: \`\${demo.path}/*\`, element: demo.element })),",
          "]);",
          "return (",
          "<UiContainer>",
          "<Grid>",
          "<Grid.Col span={{ base: 12, sm: 2 }}>",
          "{demos.map((demo) => {",
          "const to = \`/demo/\${demo.path}\`;",
          "return (",
          "<NavLink",
          "active={pathname.startsWith(to)}",
          "component={Link}",
          "key={demo.path}",
          "label={demo.label}",
          "to={to}",
          "/>",
          ");",
          "})}",
          "</Grid.Col>",
          "<Grid.Col span={{ base: 12, sm: 10 }}>",
          "<UiStack gap="xl">{routes}</UiStack>",
          "</Grid.Col>",
          "</Grid>",
          "</UiContainer>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/demo-feature.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;
