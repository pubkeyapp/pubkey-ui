// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components generator should run successfully 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": {",
      ""build": { "cache": true },",
      ""lint": { "cache": true },",
      ""e2e": { "cache": true }",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-alert';",
          "export * from './ui-card';",
          "export * from './ui-container';",
          "export * from './ui-copy';",
          "export * from './ui-debug';",
          "export * from './ui-group';",
          "export * from './ui-search-input';",
          "export * from './ui-stack';",
          "export * from './ui-theme';",
          "export * from './ui-time';",
          "export * from './ui-toast';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-alert": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-alert';",
            ],
            "isBinary": false,
            "path": "./test/ui-alert/index.ts",
          },
          "ui-alert.tsx": {
            "content": [
              "import { Alert, AlertProps } from '@mantine/core';",
              "import {",
              "IconAlertCircle,",
              "IconCheck,",
              "IconCircleX,",
              "IconInfoCircle,",
              "} from '@tabler/icons-react';",
              "import { ReactNode } from 'react';",
              "export interface UiAlertProps extends AlertProps {",
              "message: ReactNode;",
              "title: ReactNode;",
              "}",
              "export function UiAlert({ message, ...props }: UiAlertProps) {",
              "return <Alert {...props}>{message}</Alert>;",
              "}",
              "export function UiError({ ...props }: UiAlertProps) {",
              "return (",
              "<UiAlert {...props} color="red" icon={props.icon ?? <IconCircleX />} />",
              ");",
              "}",
              "export function UiInfo({ ...props }: UiAlertProps) {",
              "return (",
              "<UiAlert {...props} color="blue" icon={props.icon ?? <IconInfoCircle />} />",
              ");",
              "}",
              "export function UiSuccess({ ...props }: UiAlertProps) {",
              "return (",
              "<UiAlert {...props} color="green" icon={props.icon ?? <IconCheck />} />",
              ");",
              "}",
              "export function UiWarning({ ...props }: UiAlertProps) {",
              "return (",
              "<UiAlert",
              "{...props}",
              "color="yellow"",
              "icon={props.icon ?? <IconAlertCircle />}",
              "/>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-alert/ui-alert.tsx",
          },
        },
        "path": "./test/ui-alert",
      },
      "ui-card": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-card';",
            ],
            "isBinary": false,
            "path": "./test/ui-card/index.ts",
          },
          "ui-card-title.tsx": {
            "content": [
              "import { Title, TitleProps } from '@mantine/core';",
              "import { ReactNode } from 'react';",
              "export function UiCardTitle({",
              "children,",
              "...props",
              "}: TitleProps & {",
              "children: ReactNode;",
              "}) {",
              "return (",
              "<Title order={3} {...props}>",
              "{children}",
              "</Title>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-card/ui-card-title.tsx",
          },
          "ui-card.tsx": {
            "content": [
              "import { Box, Card, CardProps, Skeleton } from '@mantine/core';",
              "import { useUiBreakpoints } from '../ui-theme';",
              "import { ReactNode } from 'react';",
              "import { UiCardTitle } from './ui-card-title';",
              "interface UiCardProps extends CardProps {",
              "children: ReactNode;",
              "loading?: boolean;",
              "title?: ReactNode;",
              "}",
              "export function UiCard({ loading, title, ...props }: UiCardProps) {",
              "const { isSm } = useUiBreakpoints();",
              "return (",
              "<Card p={isSm ? 'xs' : 'md'} {...props}>",
              "{title ? (",
              "<Box mb={isSm ? 'xs' : 'md'}>",
              "{typeof title === 'string' ? (",
              "<UiCardTitle>{title}</UiCardTitle>",
              ") : (",
              "title",
              ")}",
              "</Box>",
              ") : null}",
              "{loading ? (",
              "<Skeleton visible={loading}>{props.children}</Skeleton>",
              ") : (",
              "props.children",
              ")}",
              "</Card>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-card/ui-card.tsx",
          },
        },
        "path": "./test/ui-card",
      },
      "ui-container": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-container';",
            ],
            "isBinary": false,
            "path": "./test/ui-container/index.ts",
          },
          "ui-container.tsx": {
            "content": [
              "import { Container, ContainerProps } from '@mantine/core';",
              "import { ReactNode } from 'react';",
              "import { useUiBreakpoints } from '../ui-theme';",
              "export interface UiContainerProps extends ContainerProps {",
              "children: ReactNode;",
              "}",
              "export function UiContainer({ children, ...props }: UiContainerProps) {",
              "const { isSm } = useUiBreakpoints();",
              "return (",
              "<Container",
              "fluid={isSm}",
              "size="xl"",
              "px={isSm ? 'xs' : undefined}",
              "py={isSm ? 'xs' : 'md'}",
              "{...props}",
              ">",
              "{children}",
              "</Container>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-container/ui-container.tsx",
          },
        },
        "path": "./test/ui-container",
      },
      "ui-copy": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-copy';",
            ],
            "isBinary": false,
            "path": "./test/ui-copy/index.ts",
          },
          "ui-copy.tsx": {
            "content": [
              "import { ActionIcon, CopyButton, Tooltip } from '@mantine/core';",
              "import { IconCheck, IconCopy } from '@tabler/icons-react';",
              "export function UiCopy({ text, tooltip }: { text: string; tooltip?: string }) {",
              "return (",
              "<CopyButton value={text} timeout={2000}>",
              "{({ copied, copy }) => (",
              "<Tooltip",
              "label={copied ? 'Copied' : tooltip ?? 'Copy'}",
              "withArrow",
              "position="top"",
              ">",
              "<ActionIcon",
              "variant="light"",
              "size="sm"",
              "color={copied ? 'brand' : 'gray'}",
              "onClick={copy}",
              ">",
              "{copied ? <IconCheck size={16} /> : <IconCopy size={16} />}",
              "</ActionIcon>",
              "</Tooltip>",
              ")}",
              "</CopyButton>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-copy/ui-copy.tsx",
          },
        },
        "path": "./test/ui-copy",
      },
      "ui-debug": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-debug';",
              "export * from './ui-debug-modal';",
            ],
            "isBinary": false,
            "path": "./test/ui-debug/index.ts",
          },
          "ui-debug-modal.tsx": {
            "content": [
              "import { ActionIcon, Tooltip } from '@mantine/core';",
              "import { modals } from '@mantine/modals';",
              "import { IconBug } from '@tabler/icons-react';",
              "import { UiDebug } from './ui-debug';",
              "export function handleDebugModalClick({",
              "data,",
              "title,",
              "}: {",
              "data: string | unknown;",
              "title?: string;",
              "}) {",
              "return modals.open({",
              "size: 'lg',",
              "title: title ?? 'Debug',",
              "children: <UiDebug data={data} open hideButton />,",
              "});",
              "}",
              "export function UiDebugModal({",
              "data,",
              "title,",
              "}: {",
              "data: string | unknown;",
              "title?: string;",
              "}) {",
              "return (",
              "<Tooltip label="Show debug data">",
              "<ActionIcon",
              "color="brand"",
              "variant="subtle"",
              "onClick={() => handleDebugModalClick({ data, title })}",
              ">",
              "<IconBug size={16} />",
              "</ActionIcon>",
              "</Tooltip>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-debug/ui-debug-modal.tsx",
          },
          "ui-debug.tsx": {
            "content": [
              "import {",
              "Box,",
              "Group,",
              "Paper,",
              "Text,",
              "UnstyledButton,",
              "useMantineTheme,",
              "} from '@mantine/core';",
              "import { IconEye, IconEyeOff } from '@tabler/icons-react';",
              "import { ReactNode, useState } from 'react';",
              "export function UiDebug({",
              "data,",
              "hideButton,",
              "open,",
              "}: {",
              "data: string | unknown;",
              "open?: boolean;",
              "hideButton?: boolean;",
              "}) {",
              "const theme = useMantineTheme();",
              "const [show, setShow] = useState(open);",
              "const content: ReactNode =",
              "typeof data === 'string' ? data : JSON.stringify(data, null, 2);",
              "return (",
              "<Box>",
              "<Paper",
              "component="pre"",
              "fz="xs"",
              "m={0}",
              "p={theme.spacing.xs}",
              "style={{ overflow: 'auto', textOverflow: 'ellipsis' }}",
              "withBorder",
              ">",
              "{hideButton ? null : (",
              "<UnstyledButton onClick={() => setShow(!show)}>",
              "<Group p="xs" gap="xs">",
              "{show ? <IconEyeOff size={16} /> : <IconEye size={16} />}",
              "<Text size="xs">{show ? 'Hide' : 'Show'} debug data</Text>",
              "</Group>",
              "</UnstyledButton>",
              ")}",
              "<Box display={show ? 'block' : 'none'}>{content}</Box>",
              "</Paper>",
              "</Box>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-debug/ui-debug.tsx",
          },
        },
        "path": "./test/ui-debug",
      },
      "ui-group": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-group';",
            ],
            "isBinary": false,
            "path": "./test/ui-group/index.ts",
          },
          "ui-group.tsx": {
            "content": [
              "import { Group, GroupProps } from '@mantine/core';",
              "import { ReactNode } from 'react';",
              "export interface UiGroupProps extends GroupProps {",
              "children: ReactNode;",
              "}",
              "export function UiGroup({ children, ...props }: UiGroupProps) {",
              "return <Group {...props}>{children}</Group>;",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-group/ui-group.tsx",
          },
        },
        "path": "./test/ui-group",
      },
      "ui-search-input": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-search-input';",
            ],
            "isBinary": false,
            "path": "./test/ui-search-input/index.ts",
          },
          "ui-search-input.tsx": {
            "content": [
              "import {",
              "ActionIcon,",
              "ActionIconProps,",
              "rem,",
              "TextInput,",
              "TextInputProps,",
              "useMantineTheme,",
              "} from '@mantine/core';",
              "import { IconArrowRight, IconSearch } from '@tabler/icons-react';",
              "export function UiSearchInput({",
              "...props",
              "}: {",
              "icon?: ActionIconProps;",
              "text?: TextInputProps;",
              "} = {}) {",
              "const theme = useMantineTheme();",
              "return (",
              "<TextInput",
              "leftSection={",
              "<IconSearch style={{ width: rem(18), height: rem(18) }} stroke={1.5} />",
              "}",
              "rightSection={",
              "<ActionIcon",
              "size={32}",
              "radius="xl"",
              "color={theme.primaryColor}",
              "variant="filled"",
              "{...props.icon}",
              ">",
              "<IconArrowRight",
              "style={{ width: rem(18), height: rem(18) }}",
              "stroke={1.5}",
              "/>",
              "</ActionIcon>",
              "}",
              "radius="xl"",
              "variant="filled"",
              "size="md"",
              "placeholder="Search"",
              "{...props.text}",
              "/>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-search-input/ui-search-input.tsx",
          },
        },
        "path": "./test/ui-search-input",
      },
      "ui-stack": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-stack';",
            ],
            "isBinary": false,
            "path": "./test/ui-stack/index.ts",
          },
          "ui-stack.tsx": {
            "content": [
              "import { Stack, StackProps } from '@mantine/core';",
              "import { ReactNode } from 'react';",
              "import { useUiBreakpoints } from '../ui-theme';",
              "export interface UiStackProps extends StackProps {",
              "children: ReactNode;",
              "}",
              "export function UiStack({ children, ...props }: UiStackProps) {",
              "const { isSm } = useUiBreakpoints();",
              "return (",
              "<Stack gap={isSm ? 'xs' : 'md'} {...props}>",
              "{children}",
              "</Stack>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-stack/ui-stack.tsx",
          },
        },
        "path": "./test/ui-stack",
      },
      "ui-theme": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-color-scheme-provider';",
              "export * from './ui-theme-provider';",
              "export * from './use-ui-breakpoints';",
            ],
            "isBinary": false,
            "path": "./test/ui-theme/index.ts",
          },
          "ui-color-scheme-provider.tsx": {
            "content": [
              "import {",
              "MantineColorScheme,",
              "useComputedColorScheme,",
              "useMantineColorScheme,",
              "} from '@mantine/core';",
              "import { useHotkeys } from '@mantine/hooks';",
              "import { createContext, ReactNode, useContext } from 'react';",
              "export interface UiColorSchemeProviderContext {",
              "colorScheme: MantineColorScheme;",
              "toggleColorScheme: (colorScheme?: MantineColorScheme) => void;",
              "}",
              "const Context = createContext<UiColorSchemeProviderContext>(",
              "{} as UiColorSchemeProviderContext",
              ");",
              "export function UiColorSchemeProvider({ children }: { children: ReactNode }) {",
              "const { toggleColorScheme } = useMantineColorScheme();",
              "const colorScheme = useComputedColorScheme('dark', {",
              "getInitialValueInEffect: true,",
              "});",
              "useHotkeys([['mod+J', () => toggleColorScheme()]]);",
              "const value: UiColorSchemeProviderContext = {",
              "colorScheme,",
              "toggleColorScheme,",
              "};",
              "return <Context.Provider value={value}>{children}</Context.Provider>;",
              "}",
              "export function useUiColorScheme() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-theme/ui-color-scheme-provider.tsx",
          },
          "ui-theme-provider.tsx": {
            "content": [
              "import {",
              "ColorSchemeScript,",
              "createTheme,",
              "DEFAULT_THEME,",
              "Loader,",
              "MantineProvider,",
              "} from '@mantine/core';",
              "import { ModalsProvider } from '@mantine/modals';",
              "import { Notifications } from '@mantine/notifications';",
              "import {",
              "createContext,",
              "FunctionComponent,",
              "ReactNode,",
              "Suspense,",
              "useContext,",
              "} from 'react';",
              "import { UiColorSchemeProvider } from './ui-color-scheme-provider';",
              "// Import the mantine theme styles",
              "import './ui-theme-styles';",
              "const theme = createTheme({",
              "colors: {",
              "brand: DEFAULT_THEME.colors.blue,",
              "},",
              "primaryColor: 'brand',",
              "});",
              "export type UiThemeLink = FunctionComponent<{",
              "children: ReactNode;",
              "to: string;",
              "target?: HTMLAnchorElement['target'];",
              "rel?: HTMLAnchorElement['rel'];",
              "}>;",
              "export const defaultUiThemeLink: UiThemeLink = ({ children, ...props }) => (",
              "<a href={props.to} {...props}>",
              "{children}",
              "</a>",
              ");",
              "export interface UiThemeProviderContext {",
              "Link: UiThemeLink;",
              "}",
              "const Context = createContext<UiThemeProviderContext>(",
              "{} as UiThemeProviderContext",
              ");",
              "export function UiThemeProvider({",
              "children,",
              "link,",
              "}: {",
              "children: ReactNode;",
              "link?: UiThemeLink;",
              "}) {",
              "const value: UiThemeProviderContext = {",
              "Link: link ?? defaultUiThemeLink,",
              "};",
              "return (",
              "<Context.Provider value={value}>",
              "<ColorSchemeScript defaultColorScheme="auto" />",
              "<MantineProvider theme={theme} defaultColorScheme="auto">",
              "<UiColorSchemeProvider>",
              "<ModalsProvider>",
              "<Notifications />",
              "<Suspense fallback={<Loader />}>{children}</Suspense>",
              "</ModalsProvider>",
              "</UiColorSchemeProvider>",
              "</MantineProvider>",
              "</Context.Provider>",
              ");",
              "}",
              "export function useUiTheme() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-theme/ui-theme-provider.tsx",
          },
          "ui-theme-styles.ts": {
            "content": [
              "// Core styles",
              "import '@mantine/core/styles.css';",
              "// Package styles",
              "import '@mantine/dates/styles.css';",
              "import '@mantine/notifications/styles.css';",
            ],
            "isBinary": false,
            "path": "./test/ui-theme/ui-theme-styles.ts",
          },
        },
        "path": "./test/ui-theme",
      },
      "ui-time": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-time';",
            ],
            "isBinary": false,
            "path": "./test/ui-time/index.ts",
          },
          "ui-time.tsx": {
            "content": [
              "import { Text, TextProps } from '@mantine/core';",
              "import TimeAgo from 'timeago-react';",
              "export interface UiTimeProps extends TextProps {",
              "date: Date;",
              "prefix?: string;",
              "suffix?: string;",
              "}",
              "export function UiTime({ date, prefix, suffix, ...props }: UiTimeProps) {",
              "return (",
              "<Text {...props} title={date.toISOString()}>",
              "{prefix}",
              "<TimeAgo datetime={date} locale="en_US" />",
              "{suffix}",
              "</Text>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-time/ui-time.tsx",
          },
        },
        "path": "./test/ui-time",
      },
      "ui-toast": {
        "children": {
          "index.ts": {
            "content": [
              "export * from './ui-toast';",
            ],
            "isBinary": false,
            "path": "./test/ui-toast/index.ts",
          },
          "ui-toast.tsx": {
            "content": [
              "import { NotificationData, notifications } from '@mantine/notifications';",
              "export type ToastProps = string | NotificationData;",
              "export function toastSuccess(notification: ToastProps) {",
              "notification =",
              "typeof notification === 'string' ? { message: notification } : notification;",
              "notifications.show({",
              "color: notification?.color ?? 'green',",
              "title: notification?.title ?? 'Success',",
              "message: notification?.message,",
              "});",
              "}",
              "export function toastError(notification: ToastProps) {",
              "notification =",
              "typeof notification === 'string' ? { message: notification } : notification;",
              "notifications.show({",
              "color: notification?.color ?? 'red',",
              "title: notification?.title ?? 'Error',",
              "message: notification?.message,",
              "});",
              "}",
              "export function toastWarning(notification: ToastProps) {",
              "notification =",
              "typeof notification === 'string' ? { message: notification } : notification;",
              "notifications.show({",
              "color: notification?.color ?? 'yellow',",
              "title: notification?.title ?? 'Warning',",
              "message: notification?.message,",
              "});",
              "}",
              "export function toastInfo(notification: ToastProps) {",
              "notification =",
              "typeof notification === 'string' ? { message: notification } : notification;",
              "notifications.show({",
              "color: notification?.color ?? 'cyan',",
              "title: notification?.title ?? 'Info',",
              "message: notification?.message,",
              "});",
              "}",
            ],
            "isBinary": false,
            "path": "./test/ui-toast/ui-toast.tsx",
          },
        },
        "path": "./test/ui-toast",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;
