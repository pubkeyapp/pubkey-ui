import { ColorSchemeScript, createTheme, DEFAULT_THEME, Loader, MantineProvider, MantineThemeOverride } from '@mantine/core'
import { ModalsProvider } from '@mantine/modals'
import { Notifications } from '@mantine/notifications'
import { createContext, FunctionComponent, ReactNode, Suspense, useContext } from 'react'
import { <%= prefix.className %>ColorSchemeProvider } from './<%= prefix.fileName %>-color-scheme-provider'

// Import the mantine theme styles
import './<%= prefix.fileName %>-theme-styles'

const defaultTheme = createTheme({
  colors: {
    brand: DEFAULT_THEME.colors.blue,
  },
  primaryColor: 'brand',
})

export type <%= prefix.className %>ThemeLink = FunctionComponent<{
  children: ReactNode
  to: string
  target?: HTMLAnchorElement['target']
  rel?: HTMLAnchorElement['rel']
}>

export const default<%= prefix.className %>ThemeLink: <%= prefix.className %>ThemeLink = ({ children, ...props }) => (
  <a href={props.to} {...props}>
    {children}
  </a>
)

export interface <%= prefix.className %>ThemeProviderOptions {
  children: ReactNode
  link?: <%= prefix.className %>ThemeLink
  theme?: MantineThemeOverride
}
export interface <%= prefix.className %>ThemeProviderContext {
  Link: <%= prefix.className %>ThemeLink
}

const Context = createContext<<%= prefix.className %>ThemeProviderContext>({} as <%= prefix.className %>ThemeProviderContext)

export function <%= prefix.className %>ThemeProvider({ children, link, theme }: <%= prefix.className %>ThemeProviderOptions) {
  const value: <%= prefix.className %>ThemeProviderContext = {
    Link: link ?? default<%= prefix.className %>ThemeLink,
  }

  return (
    <Context.Provider value={value}>
      <ColorSchemeScript defaultColorScheme="auto" />
      <MantineProvider theme={theme ?? defaultTheme} defaultColorScheme="auto">
        <<%= prefix.className %>ColorSchemeProvider>
          <ModalsProvider>
            <Notifications />
            <Suspense fallback={<Loader />}>{children}</Suspense>
          </ModalsProvider>
        </<%= prefix.className %>ColorSchemeProvider>
      </MantineProvider>
    </Context.Provider>
  )
}

export function use<%= prefix.className %>Theme() {
  return useContext(Context)
}
