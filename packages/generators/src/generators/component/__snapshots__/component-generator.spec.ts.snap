// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component generator should create files for alert 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-alert';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-alert.tsx": {
        "content": [
          "import { Alert, AlertProps } from '@mantine/core';",
          "import {",
          "IconAlertCircle,",
          "IconCheck,",
          "IconCircleX,",
          "IconInfoCircle,",
          "} from '@tabler/icons-react';",
          "import { ReactNode } from 'react';",
          "export interface UiAlertProps extends AlertProps {",
          "message: ReactNode;",
          "title?: ReactNode;",
          "}",
          "export function UiAlert({ message, ...props }: UiAlertProps) {",
          "return (",
          "<Alert title={props.title ?? 'Alert'} {...props}>",
          "{message}",
          "</Alert>",
          ");",
          "}",
          "export function UiError({ ...props }: UiAlertProps) {",
          "return (",
          "<UiAlert",
          "title={props.title ?? 'Error'}",
          "color="red"",
          "icon={props.icon ?? <IconCircleX />}",
          "{...props}",
          "/>",
          ");",
          "}",
          "export function UiInfo({ ...props }: UiAlertProps) {",
          "return (",
          "<UiAlert",
          "title={props.title ?? 'Info'}",
          "color="blue"",
          "icon={props.icon ?? <IconInfoCircle />}",
          "{...props}",
          "/>",
          ");",
          "}",
          "export function UiSuccess({ ...props }: UiAlertProps) {",
          "return (",
          "<UiAlert",
          "title={props.title ?? 'Success'}",
          "color="green"",
          "icon={props.icon ?? <IconCheck />}",
          "{...props}",
          "/>",
          ");",
          "}",
          "export function UiWarning({ ...props }: UiAlertProps) {",
          "return (",
          "<UiAlert",
          "title={props.title ?? 'Warning'}",
          "color="yellow"",
          "icon={props.icon ?? <IconAlertCircle />}",
          "{...props}",
          "/>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-alert.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for anchor 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-anchor';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-anchor.tsx": {
        "content": [
          "import { Anchor, AnchorProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "import { Link } from 'react-router-dom';",
          "export interface UiAnchorProps extends AnchorProps {",
          "children: ReactNode;",
          "href?: string;",
          "to?: string;",
          "target?: HTMLAnchorElement['target'];",
          "}",
          "export function UiAnchor({",
          "children,",
          "href,",
          "target,",
          "to,",
          "...props",
          "}: UiAnchorProps) {",
          "return to ? (",
          "<Anchor component={Link} to={to} target={target} {...props}>",
          "{children}",
          "</Anchor>",
          ") : href ? (",
          "<Anchor component="a" href={href} target={target} {...props}>",
          "{children}",
          "</Anchor>",
          ") : (",
          "children",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-anchor.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for avatar 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-avatar';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-avatar.tsx": {
        "content": [
          "import { Avatar, AvatarProps, Tooltip } from '@mantine/core';",
          "import { getColorByIndex, getIntFromString } from '../ui-helpers';",
          "import { UiAnchor } from '../ui-anchor';",
          "export type UiAvatarProps = Omit<AvatarProps, 'src'> & {",
          "url?: string | null;",
          "name?: string | null;",
          "to?: string;",
          "tooltipLabel?: string;",
          "};",
          "export function UiAvatar({",
          "url,",
          "name,",
          "to,",
          "tooltipLabel,",
          "...props",
          "}: UiAvatarProps) {",
          "const firstLetter = name?.charAt(0) ?? '?';",
          "const content = url?.length ? (",
          "<Avatar radius={100} src={url} alt={\`\${name} avatar\`} {...props} />",
          ") : (",
          "<Avatar",
          "radius={100}",
          "color={getColorByIndex(getIntFromString(name ?? ''))}",
          "{...props}",
          ">",
          "{firstLetter?.toUpperCase()}",
          "</Avatar>",
          ");",
          "const anchor = <UiAnchor to={to}>{content}</UiAnchor>;",
          "return tooltipLabel ? (",
          "<Tooltip label={tooltipLabel} withArrow>",
          "{anchor}",
          "</Tooltip>",
          ") : (",
          "anchor",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-avatar.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for back 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-back';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-back.tsx": {
        "content": [
          "import { ActionIcon, ActionIconProps } from '@mantine/core';",
          "import { IconArrowLeft } from '@tabler/icons-react';",
          "import { useUiTheme } from '../ui-theme';",
          "export function UiBack({",
          "to = '../',",
          "...props",
          "}: ActionIconProps & { to?: string }) {",
          "const { Link } = useUiTheme();",
          "return (",
          "<ActionIcon",
          "color="brand"",
          "size="sm"",
          "variant="light"",
          "component={Link}",
          "to={to}",
          "{...props}",
          ">",
          "<IconArrowLeft />",
          "</ActionIcon>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-back.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for card 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-card';",
          "export * from './ui-card-title';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-card-title.tsx": {
        "content": [
          "import { Title, TitleProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "export function UiCardTitle({",
          "children,",
          "...props",
          "}: TitleProps & {",
          "children: ReactNode;",
          "}) {",
          "return (",
          "<Title order={3} {...props}>",
          "{children}",
          "</Title>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-card-title.tsx",
      },
      "ui-card.tsx": {
        "content": [
          "import { Box, Paper, PaperProps, Skeleton, Stack } from '@mantine/core';",
          "import { useUiBreakpoints } from '../ui-theme';",
          "import { ReactNode } from 'react';",
          "import { UiCardTitle } from './ui-card-title';",
          "interface UiCardProps extends PaperProps {",
          "children?: ReactNode;",
          "loading?: boolean;",
          "title?: ReactNode;",
          "}",
          "export function UiCard({ loading, title, ...props }: UiCardProps) {",
          "const { isSm } = useUiBreakpoints();",
          "return (",
          "<Paper p={isSm ? 'xs' : 'md'} withBorder {...props}>",
          "<Stack gap={isSm ? 'xs' : 'md'}>",
          "{title ? (",
          "<Box>",
          "{typeof title === 'string' ? (",
          "<UiCardTitle>{title}</UiCardTitle>",
          ") : (",
          "title",
          ")}",
          "</Box>",
          ") : null}",
          "{props.children ? (",
          "loading ? (",
          "<Skeleton visible={loading}>{props.children}</Skeleton>",
          ") : (",
          "props.children",
          ")",
          ") : null}",
          "</Stack>",
          "</Paper>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-card.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for container 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-container';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-container.tsx": {
        "content": [
          "import { Container, ContainerProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "import { useUiBreakpoints } from '../ui-theme';",
          "export interface UiContainerProps extends ContainerProps {",
          "children: ReactNode;",
          "}",
          "export function UiContainer({ children, ...props }: UiContainerProps) {",
          "const { isSm } = useUiBreakpoints();",
          "return (",
          "<Container",
          "fluid={isSm}",
          "size="xl"",
          "px={isSm ? 'xs' : undefined}",
          "py={isSm ? 'xs' : 'md'}",
          "{...props}",
          ">",
          "{children}",
          "</Container>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-container.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for copy 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-copy';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-copy.tsx": {
        "content": [
          "import {",
          "ActionIcon,",
          "ActionIconProps,",
          "CopyButton,",
          "Tooltip,",
          "} from '@mantine/core';",
          "import { IconCheck, IconCopy } from '@tabler/icons-react';",
          "export function UiCopy({",
          "text,",
          "tooltip,",
          "...props",
          "}: ActionIconProps & { text: string; tooltip?: string }) {",
          "return (",
          "<CopyButton value={text} timeout={2000}>",
          "{({ copied, copy }) => (",
          "<Tooltip",
          "label={copied ? 'Copied' : tooltip ?? 'Copy'}",
          "withArrow",
          "position="top"",
          ">",
          "<ActionIcon",
          "variant="light"",
          "size="sm"",
          "color={copied ? 'green' : 'brand'}",
          "onClick={copy}",
          "{...props}",
          ">",
          "{copied ? <IconCheck size={16} /> : <IconCopy size={16} />}",
          "</ActionIcon>",
          "</Tooltip>",
          ")}",
          "</CopyButton>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-copy.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for dashboard-grid 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-dashboard-grid';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-dashboard-grid.module.css": {
        "content": [
          ".item {",
          "display: flex;",
          "flex-direction: column;",
          "align-items: center;",
          "justify-content: center;",
          "text-align: center;",
          "border-radius: var(--mantine-radius-md);",
          "height: rem(180px);",
          "background-color: light-dark(",
          "var(--mantine-color-gray-0),",
          "var(--mantine-color-dark-7)",
          ");",
          "transition: box-shadow 150ms ease, transform 100ms ease;",
          "@mixin hover {",
          "box-shadow: var(--mantine-shadow-md);",
          "transform: scale(1.05);",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-dashboard-grid.module.css",
      },
      "ui-dashboard-grid.tsx": {
        "content": [
          "import {",
          "SimpleGrid,",
          "Text,",
          "UnstyledButton,",
          "useMantineTheme,",
          "} from '@mantine/core';",
          "import { ComponentType } from 'react';",
          "import { getColorByIndex } from '../ui-helpers';",
          "import { useUiTheme } from '../ui-theme';",
          "import classes from './ui-dashboard-grid.module.css';",
          "export interface UiDashboardItem {",
          "icon: ComponentType<{ color?: string; size: number | string | undefined }>;",
          "label: string;",
          "to: string;",
          "color?: string;",
          "}",
          "export interface UiDashboardGridProps {",
          "links: UiDashboardItem[];",
          "}",
          "export function UiDashboardGrid({ links }: UiDashboardGridProps) {",
          "const { Link } = useUiTheme();",
          "const theme = useMantineTheme();",
          "const items = links.map((item, index) => (",
          "<UnstyledButton",
          "component={Link}",
          "to={item.to}",
          "key={item.label}",
          "className={classes.item}",
          ">",
          "<item.icon",
          "color={theme.colors[item.color ?? getColorByIndex(index)][6]}",
          "size={64}",
          "/>",
          "<Text",
          "size="lg"",
          "mt={7}",
          "c={theme.colors[item.color ?? getColorByIndex(index)][6]}",
          ">",
          "{item.label}",
          "</Text>",
          "</UnstyledButton>",
          "));",
          "return (",
          "<SimpleGrid",
          "cols={{ xs: 1, sm: 2, md: 3 }}",
          "spacing={{ base: 'sm', md: 'xl' }}",
          "px="md"",
          ">",
          "{items}",
          "</SimpleGrid>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-dashboard-grid.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for debug 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-debug';",
          "export * from './ui-debug-modal';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-debug-modal.tsx": {
        "content": [
          "import { ActionIcon, ActionIconProps, Tooltip } from '@mantine/core';",
          "import { modals } from '@mantine/modals';",
          "import { IconBug } from '@tabler/icons-react';",
          "import { UiDebug } from './ui-debug';",
          "export function handleDebugModalClick({",
          "data,",
          "title,",
          "}: {",
          "data: string | unknown;",
          "title?: string;",
          "}) {",
          "return modals.open({",
          "size: 'lg',",
          "title: title ?? 'Debug',",
          "children: <UiDebug data={data} open hideButton />,",
          "});",
          "}",
          "export function UiDebugModal({",
          "data,",
          "title,",
          "...props",
          "}: ActionIconProps & { data: string | unknown; title?: string }) {",
          "return (",
          "<Tooltip label="Show debug data">",
          "<ActionIcon",
          "color="brand"",
          "variant="light"",
          "size="sm"",
          "onClick={() => handleDebugModalClick({ data, title })}",
          "{...props}",
          ">",
          "<IconBug size={16} />",
          "</ActionIcon>",
          "</Tooltip>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-debug-modal.tsx",
      },
      "ui-debug.tsx": {
        "content": [
          "import {",
          "Box,",
          "Group,",
          "Paper,",
          "Text,",
          "UnstyledButton,",
          "useMantineTheme,",
          "} from '@mantine/core';",
          "import { IconEye, IconEyeOff } from '@tabler/icons-react';",
          "import { ReactNode, useState } from 'react';",
          "export function UiDebug({",
          "data,",
          "hideButton,",
          "open,",
          "}: {",
          "data: string | unknown;",
          "open?: boolean;",
          "hideButton?: boolean;",
          "}) {",
          "const theme = useMantineTheme();",
          "const [show, setShow] = useState(open);",
          "const content: ReactNode =",
          "typeof data === 'string' ? data : JSON.stringify(data, null, 2);",
          "return (",
          "<Box>",
          "<Paper",
          "component="pre"",
          "fz="xs"",
          "m={0}",
          "p={theme.spacing.xs}",
          "style={{ overflow: 'auto', textOverflow: 'ellipsis' }}",
          "withBorder",
          ">",
          "{hideButton ? null : (",
          "<UnstyledButton onClick={() => setShow(!show)}>",
          "<Group p="xs" gap="xs">",
          "{show ? <IconEyeOff size={16} /> : <IconEye size={16} />}",
          "<Text size="xs">{show ? 'Hide' : 'Show'} debug data</Text>",
          "</Group>",
          "</UnstyledButton>",
          ")}",
          "<Box display={show ? 'block' : 'none'}>{content}</Box>",
          "</Paper>",
          "</Box>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-debug.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for form 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-form';",
          "export * from './ui-form-checkbox';",
          "export * from './ui-form-date';",
          "export * from './ui-form-field';",
          "export * from './ui-form-number';",
          "export * from './ui-form-password';",
          "export * from './ui-form-select';",
          "export * from './ui-form-text';",
          "export * from './ui-form-textarea';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-form-checkbox.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormCheckbox<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'rows' | 'type'",
          ">;",
          "export function formFieldCheckbox<T>(",
          "key: keyof T,",
          "options: UiFormCheckbox<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Checkbox,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-checkbox.tsx",
      },
      "ui-form-date.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormDate<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'rows' | 'type'",
          "> & {",
          "maxDate?: Date;",
          "minDate?: Date;",
          "};",
          "export function formFieldDate<T>(",
          "key: keyof T,",
          "options: UiFormDate<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Date,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-date.tsx",
      },
      "ui-form-field.ts": {
        "content": [
          "export enum UiFormFieldType {",
          "Checkbox = 'checkbox',",
          "Date = 'Date',",
          "Number = 'Number',",
          "Password = 'Password',",
          "Select = 'Select',",
          "Text = 'Text',",
          "Textarea = 'textarea',",
          "}",
          "export interface UiFormField<T> {",
          "key: keyof T;",
          "label?: string;",
          "description?: string;",
          "options?: { label: string; value: string }[];",
          "placeholder?: string;",
          "required?: boolean;",
          "readOnly?: boolean;",
          "disabled?: boolean;",
          "rows?: number;",
          "type: UiFormFieldType;",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-field.ts",
      },
      "ui-form-number.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormInput<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'rows' | 'type'",
          ">;",
          "export function formFieldNumber<T>(",
          "key: keyof T,",
          "options: UiFormInput<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Number,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-number.tsx",
      },
      "ui-form-password.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormPassword<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'rows' | 'type'",
          ">;",
          "export function formFieldPassword<T>(",
          "key: keyof T,",
          "options: UiFormPassword<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Password,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-password.tsx",
      },
      "ui-form-select.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormSelect<T> = Omit<UiFormField<T>, 'key' | 'rows' | 'type'>;",
          "export function formFieldSelect<T>(",
          "key: keyof T,",
          "options: UiFormSelect<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Select,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-select.tsx",
      },
      "ui-form-text.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormText<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'rows' | 'type'",
          "> & {",
          "error?: unknown;",
          "pattern?: string;",
          "};",
          "export function formFieldText<T>(",
          "key: keyof T,",
          "options: UiFormText<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Text,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-text.tsx",
      },
      "ui-form-textarea.tsx": {
        "content": [
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "export type UiFormTextArea<T> = Omit<",
          "UiFormField<T>,",
          "'key' | 'options' | 'type'",
          "> & {",
          "rows?: number;",
          "};",
          "export function formFieldTextarea<T>(",
          "key: keyof T,",
          "options: UiFormTextArea<T>",
          "): UiFormField<T> {",
          "return {",
          "key,",
          "type: UiFormFieldType.Textarea,",
          "...options,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form-textarea.tsx",
      },
      "ui-form.tsx": {
        "content": [
          "import {",
          "Alert,",
          "Checkbox,",
          "NumberInput,",
          "PasswordInput,",
          "Select,",
          "Stack,",
          "Textarea,",
          "TextInput,",
          "} from '@mantine/core';",
          "import { DatePickerInput } from '@mantine/dates';",
          "import { useForm } from '@mantine/form';",
          "import React, { ReactNode, useEffect } from 'react';",
          "import { UiFormDate } from './ui-form-date';",
          "import { UiFormField, UiFormFieldType } from './ui-form-field';",
          "import { UiFormText } from './ui-form-text';",
          "function cleanupValues<T>({",
          "fields,",
          "values,",
          "}: {",
          "fields: UiFormField<T>[];",
          "values: Partial<T>;",
          "}): Partial<T> {",
          "type fieldKey = keyof T;",
          "const fieldKeys: Array<fieldKey> = fields.map((field) => field.key);",
          "return Object.keys(values as Record<fieldKey, unknown>).reduce((acc, key) => {",
          "if (fieldKeys.includes(key as fieldKey)) {",
          "acc[key as fieldKey] = values[key as fieldKey];",
          "}",
          "return acc;",
          "}, {} as Partial<T>);",
          "}",
          "// eslint-disable-next-line @typescript-eslint/no-explicit-any",
          "export function UiForm<T extends Record<string, any>>({",
          "children,",
          "model,",
          "fields,",
          "submit,",
          "validate,",
          "}: {",
          "children?: ReactNode;",
          "model: T;",
          "fields: UiFormField<T>[];",
          "submit: (input: Partial<T>) => Promise<boolean | undefined>;",
          "validate?: (input: Partial<T>) => Record<string, string>;",
          "}) {",
          "const form = useForm<T>({",
          "clearInputErrorOnChange: true,",
          "initialValues: model,",
          "validate,",
          "});",
          "async function handleSubmit(values: T) {",
          "const input = cleanupValues({ fields, values });",
          "const result = await submit(input);",
          "if (!result) {",
          "form.setFieldError('submit', 'An error occurred');",
          "} else {",
          "form.reset();",
          "}",
          "}",
          "useEffect(() => {",
          "form.setValues(model);",
          "form.resetDirty(model);",
          "}, [model]);",
          "return (",
          "<form onSubmit={form.onSubmit(handleSubmit)}>",
          "<Stack gap={16}>",
          "{fields.map((field) => {",
          "switch (field.type) {",
          "case UiFormFieldType.Checkbox:",
          "return (",
          "<Checkbox",
          "key={field.key?.toString()}",
          "description={field.description}",
          "disabled={field.disabled}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "{...form.getInputProps(field.key, { type: 'checkbox' })}",
          "/>",
          ");",
          "case UiFormFieldType.Date:",
          "return (",
          "<DatePickerInput",
          "key={field.key?.toString()}",
          "description={field.description}",
          "disabled={field.disabled}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "maxDate={(field as UiFormDate<T>).maxDate}",
          "minDate={(field as UiFormDate<T>).minDate}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "case UiFormFieldType.Number:",
          "return (",
          "<NumberInput",
          "key={field.key?.toString()}",
          "description={field.description}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "withAsterisk={field.required}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "case UiFormFieldType.Text:",
          "return (",
          "<TextInput",
          "readOnly={field.readOnly}",
          "disabled={field.disabled}",
          "error={(field as UiFormText<T>)?.error}",
          "pattern={(field as UiFormText<T>)?.pattern}",
          "styles={{ input: { marginTop: 16 } }}",
          "key={field.key?.toString()}",
          "description={field.description}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "withAsterisk={field.required}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "case UiFormFieldType.Password:",
          "return (",
          "<PasswordInput",
          "key={field.key?.toString()}",
          "description={field.description}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "withAsterisk={field.required}",
          "// icon={<IconLock size={16} />}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "case UiFormFieldType.Select:",
          "return (",
          "<Select",
          "variant="filled"",
          "styles={{ input: { marginTop: 16 } }}",
          "key={field.key?.toString()}",
          "description={field.description}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "data={field.options ?? []}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "case UiFormFieldType.Textarea:",
          "return (",
          "<Textarea",
          "variant="filled"",
          "key={field.key?.toString()}",
          "description={field.description}",
          "label={field.label}",
          "placeholder={field.placeholder ?? field.label}",
          "required={field.required}",
          "rows={field.rows ?? 5}",
          "withAsterisk={field.required}",
          "{...form.getInputProps(field.key)}",
          "/>",
          ");",
          "default:",
          "return <Alert>Unknown form type: {field.type}</Alert>;",
          "}",
          "})}",
          "{children ? children : null}",
          "</Stack>",
          "</form>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-form.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for grid-routes 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-grid-routes';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-grid-routes.tsx": {
        "content": [
          "import {",
          "Grid,",
          "GridColProps,",
          "GridProps,",
          "NavLink,",
          "NavLinkProps,",
          "} from '@mantine/core';",
          "import { ReactNode, Suspense, useMemo } from 'react';",
          "import { Link, Navigate, useLocation, useRoutes } from 'react-router-dom';",
          "import { UiNotFound } from '../ui-not-found';",
          "import { UiLoader } from '../ui-loader';",
          "export interface UiGridRoute extends NavLinkProps {",
          "path: string;",
          "label?: ReactNode;",
          "element: ReactNode;",
          "}",
          "export interface UiGridRoutesProps extends GridProps {",
          "basePath: string;",
          "routes: UiGridRoute[];",
          "leftColProps?: GridColProps;",
          "rightColProps?: GridColProps;",
          "}",
          "export function UiGridRoutes({",
          "basePath,",
          "routes,",
          "leftColProps,",
          "rightColProps,",
          "...props",
          "}: UiGridRoutesProps) {",
          "const { pathname } = useLocation();",
          "const links = useMemo(",
          "() =>",
          "routes",
          ".filter((app) => app.label)",
          ".map(({ path, label, element, ...props }) => {",
          "const to = \`\${basePath}/\${path}\`;",
          "return (",
          "<NavLink",
          "active={pathname.startsWith(to)}",
          "component={Link}",
          "key={path}",
          "label={label}",
          "to={to}",
          "{...props}",
          "/>",
          ");",
          "}),",
          "[basePath, pathname, routes]",
          ");",
          "const router = useRoutes([",
          "{ index: true, element: <Navigate to={routes[0].path} replace /> },",
          "...routes.map((item) => ({",
          "path: \`\${item.path}/*\`,",
          "element: item.element,",
          "})),",
          "{ path: '*', element: <UiNotFound to={basePath} /> },",
          "]);",
          "return (",
          "<Grid {...props}>",
          "<Grid.Col span={{ base: 12, sm: 2 }} {...rightColProps}>",
          "{links}",
          "</Grid.Col>",
          "<Grid.Col span={{ base: 12, sm: 10 }} {...leftColProps}>",
          "<Suspense fallback={<UiLoader />}>{router}</Suspense>",
          "</Grid.Col>",
          "</Grid>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-grid-routes.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for group 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-group';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-group.tsx": {
        "content": [
          "import { Group, GroupProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "export interface UiGroupProps extends GroupProps {",
          "children: ReactNode;",
          "}",
          "export function UiGroup({ children, ...props }: UiGroupProps) {",
          "return (",
          "<Group justify="space-between" {...props}>",
          "{children}",
          "</Group>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-group.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for header 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-header';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-header.module.css": {
        "content": [
          ".header {",
          "height: rem(56px);",
          "background-color: light-dark(",
          "var(--mantine-color-white),",
          "var(--mantine-color-dark-9)",
          ");",
          "padding-left: var(--mantine-spacing-md);",
          "padding-right: var(--mantine-spacing-md);",
          "}",
          ".inner {",
          "height: rem(56px);",
          "display: flex;",
          "justify-content: space-between;",
          "align-items: center;",
          "}",
          ".link {",
          "display: block;",
          "line-height: 1;",
          "padding: rem(8px) rem(12px);",
          "border-radius: var(--mantine-radius-sm);",
          "text-decoration: none;",
          "color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));",
          "font-size: var(--mantine-font-size-sm);",
          "font-weight: 500;",
          "@mixin hover {",
          "background-color: light-dark(",
          "var(--mantine-color-gray-0),",
          "var(--mantine-color-dark-7)",
          ");",
          "}",
          "}",
          ".linkActive {",
          "background-color: light-dark(",
          "var(--mantine-color-gray-0),",
          "var(--mantine-color-dark-8)",
          ");",
          "color: light-dark(var(--mantine-color-brand-6), var(--mantine-color-brand-4));",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-header.module.css",
      },
      "ui-header.tsx": {
        "content": [
          "import {",
          "Anchor,",
          "Burger,",
          "Drawer,",
          "DrawerProps,",
          "Group,",
          "ScrollArea,",
          "Stack,",
          "} from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "import cx from 'clsx';",
          "import { useDisclosure } from '@mantine/hooks';",
          "import { Link, useLocation } from 'react-router-dom';",
          "import { UiLogo, UiLogoType } from '../ui-logo';",
          "import classes from './ui-header.module.css';",
          "export interface UiHeaderProps {",
          "base?: string;",
          "drawerProps?: DrawerProps;",
          "logo?: ReactNode;",
          "logoSmall?: ReactNode;",
          "links?: UiHeaderLink[];",
          "opened?: boolean;",
          "profile?: ReactNode;",
          "toggle?: () => void;",
          "}",
          "export interface UiHeaderLink {",
          "link: string;",
          "label: string;",
          "}",
          "export function UiHeader(props: UiHeaderProps) {",
          "const { pathname } = useLocation();",
          "const [drawerOpened, { toggle: drawerToggle }] = useDisclosure(false);",
          "const opened = props.opened ?? drawerOpened;",
          "const toggle = props.toggle ?? drawerToggle;",
          "const burger = props.links?.length ? (",
          "<Burger opened={opened} onClick={toggle} size="sm" hiddenFrom="md" />",
          ") : null;",
          "const items = props.links?.map((link) => (",
          "<Anchor",
          "component={Link}",
          "key={link.label}",
          "to={link.link}",
          "className={cx(classes.link, {",
          "[classes.linkActive]: pathname.startsWith(link.link),",
          "})}",
          "onClick={close}",
          ">",
          "{link.label}",
          "</Anchor>",
          "));",
          "function close() {",
          "if (!opened || !props.toggle) return;",
          "props.toggle();",
          "}",
          "return (",
          "<header className={classes.header}>",
          "<div className={classes.inner}>",
          "<Group>",
          "<Group>",
          "{burger}",
          "<Anchor component={Link} to={props.base ?? '/'} display="flex">",
          "<Group hiddenFrom="md">",
          "{props.logoSmall ?? <UiLogo height={28} />}",
          "</Group>",
          "<Group visibleFrom="md">",
          "{props.logo ?? <UiLogoType height={28} />}",
          "</Group>",
          "</Anchor>",
          "</Group>",
          "<Group gap={5} className={classes.links} visibleFrom="md">",
          "{items}",
          "</Group>",
          "</Group>",
          "{props.profile ? <Group>{props.profile}</Group> : null}",
          "</div>",
          "<Drawer",
          "opened={opened}",
          "onClose={toggle}",
          "title={",
          "<Group>",
          "<Anchor",
          "component={Link}",
          "to={props.base ?? '/'}",
          "display="flex"",
          "onClick={close}",
          ">",
          "{props.logo ?? <UiLogoType height={28} />}",
          "</Anchor>",
          "</Group>",
          "}",
          "hiddenFrom="md"",
          "scrollAreaComponent={ScrollArea}",
          "{...props.drawerProps}",
          ">",
          "<Stack gap="sm">{items}</Stack>",
          "</Drawer>",
          "</header>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-header.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for helpers 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "get-color-by-index.ts": {
        "content": [
          "export const colorByIndex = [",
          "'violet',",
          "'indigo',",
          "'blue',",
          "'green',",
          "'teal',",
          "'cyan',",
          "'pink',",
          "'red',",
          "'orange',",
          "];",
          "export function getColorByIndex(",
          "index: number,",
          "colors: string[] = colorByIndex",
          ") {",
          "return colors[index % colors.length];",
          "}",
        ],
        "isBinary": false,
        "path": "./test/get-color-by-index.ts",
      },
      "get-int-from-string.ts": {
        "content": [
          "export function getIntFromString(str: string) {",
          "let hash = 0;",
          "if (str.length == 0) {",
          "return hash;",
          "}",
          "for (let i = 0; i < str.length; i++) {",
          "const char = str.charCodeAt(i);",
          "hash = (hash << 5) - hash + char;",
          "hash = hash & hash; // Convert to 32bit integer",
          "}",
          "return Math.abs(hash);",
          "}",
        ],
        "isBinary": false,
        "path": "./test/get-int-from-string.ts",
      },
      "index.ts": {
        "content": [
          "export * from './get-color-by-index';",
          "export * from './get-int-from-string';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for info-table 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-info-table';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-info-table.tsx": {
        "content": [
          "import { Table, TableProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "export type UiInfoItem = [ReactNode, ReactNode] | undefined;",
          "export type UiInfoItems = UiInfoItem[];",
          "export type UiInfoTableProps = TableProps & {",
          "items: UiInfoItems;",
          "tdw?: string;",
          "};",
          "export function UiInfoTable({",
          "items,",
          "tdw = '25%',",
          "...props",
          "}: UiInfoTableProps) {",
          "const filtered = items.filter(Boolean) as [ReactNode, ReactNode][];",
          "if (!filtered.length) return null;",
          "return (",
          "<Table {...props}>",
          "<Table.Tbody>",
          "{filtered.map(([key, value], index) => (",
          "<Table.Tr key={index}>",
          "<Table.Td w={tdw}>{key}</Table.Td>",
          "<Table.Th>{value}</Table.Th>",
          "</Table.Tr>",
          "))}",
          "</Table.Tbody>",
          "</Table>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-info-table.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for layout 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-layout';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-layout.tsx": {
        "content": [
          "import { AppShell, AppShellProps, Loader, rem } from '@mantine/core';",
          "import { ReactNode, Suspense } from 'react';",
          "export function UiLayout({",
          "children,",
          "header,",
          "headerHeight = rem(56),",
          "...props",
          "}: Omit<AppShellProps, 'header'> & {",
          "children: ReactNode;",
          "header: ReactNode;",
          "headerHeight?: string;",
          "}) {",
          "return (",
          "<AppShell header={{ height: headerHeight }} padding="md" {...props}>",
          "<AppShell.Header>{header}</AppShell.Header>",
          "<AppShell.Main>",
          "<Suspense fallback={<Loader />}>{children}</Suspense>",
          "</AppShell.Main>",
          "</AppShell>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-layout.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for loader 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-loader';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-loader.tsx": {
        "content": [
          "import { Flex, Loader, LoaderProps } from '@mantine/core';",
          "export function UiLoader({",
          "size = 'xl',",
          "type = 'oval',",
          "flex = 'inline',",
          "...props",
          "}: LoaderProps & {",
          "flex?: 'full' | 'inline';",
          "}) {",
          "return (",
          "<Flex",
          "h={flex === 'full' ? '100vh' : '100%'}",
          "justify="center"",
          "align="center"",
          ">",
          "<Loader size={size} type={type} {...props} />",
          "</Flex>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-loader.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for logo 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-logo';",
          "export * from './ui-logo-type';",
          "export * from './ui-logo-type-black';",
          "export * from './ui-logo-type-white';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-logo-type-black.tsx": {
        "content": [
          "import { UiLogoTypeProps } from './ui-logo-type';",
          "export function UiLogoTypeBlack({",
          "height,",
          "width,",
          "...props",
          "}: UiLogoTypeProps = {}) {",
          "return (",
          "<svg",
          "height={height}",
          "width={width}",
          "viewBox="0 0 2048 512"",
          "version="1.1"",
          "{...props}",
          ">",
          "<g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">",
          "<g>",
          "<rect",
          "fill="#1C7ED6"",
          "x="0"",
          "y="0"",
          "width="512"",
          "height="512"",
          "rx="64"",
          "></rect>",
          "<g",
          "transform="translate(142.000000, 96.000000)"",
          "fill="#FFFFFF"",
          "fillRule="nonzero"",
          ">",
          "<path d="M55.296,210.432 L55.296,316.416 C52.5653333,317.44 48.9813333,318.378667 44.544,319.232 C40.1066667,320.085333 35.1573333,320.512 29.696,320.512 C19.1146667,320.512 11.52,318.549333 6.912,314.624 C2.304,310.698667 0,304.128 0,294.912 L0,30.72 C0,24.9173333 1.62133333,20.3946667 4.864,17.152 C8.10666667,13.9093333 12.6293333,11.4346667 18.432,9.728 C29.0133333,5.97333333 41.6426667,3.41333333 56.32,2.048 C70.9973333,0.682666667 84.8213333,-2.84217094e-14 97.792,-2.84217094e-14 C142.165333,-2.84217094e-14 175.018667,9.38666667 196.352,28.16 C217.685333,46.9333333 228.352,72.3626667 228.352,104.448 C228.352,136.533333 217.685333,162.218667 196.352,181.504 C175.018667,200.789333 143.189333,210.432 100.864,210.432 L55.296,210.432 Z M97.28,165.888 C120.832,165.888 139.349333,160.768 152.832,150.528 C166.314667,140.288 173.056,124.928 173.056,104.448 C173.056,83.968 166.656,68.9493333 153.856,59.392 C141.056,49.8346667 122.709333,45.056 98.816,45.056 C90.9653333,45.056 83.2,45.3973333 75.52,46.08 C67.84,46.7626667 60.928,47.616 54.784,48.64 L54.784,165.888 L97.28,165.888 Z"></path>",
          "</g>",
          "</g>",
          "<g",
          "transform="translate(661.800000, 106.200000)"",
          "fill="#000000"",
          "fillRule="nonzero"",
          ">",
          "<g transform="translate(0.000000, -0.000000)">",
          "<path d="M43.2,179.2 L43.2,262 C41.0666667,262.8 38.2666667,263.533333 34.8,264.2 C31.3333333,264.866667 27.4666667,265.2 23.2,265.2 C14.9333333,265.2 9,263.666667 5.4,260.6 C1.8,257.533333 0,252.4 0,245.2 L0,38.8 C0,34.2666667 1.26666667,30.7333333 3.8,28.2 C6.33333333,25.6666667 9.86666667,23.7333333 14.4,22.4 C22.6666667,19.4666667 32.5333333,17.4666667 44,16.4 C55.4666667,15.3333333 66.2666667,14.8 76.4,14.8 C111.066667,14.8 136.733333,22.1333333 153.4,36.8 C170.066667,51.4666667 178.4,71.3333333 178.4,96.4 C178.4,121.466667 170.066667,141.533333 153.4,156.6 C136.733333,171.666667 111.866667,179.2 78.8,179.2 L43.2,179.2 Z M76,144.4 C94.4,144.4 108.866667,140.4 119.4,132.4 C129.933333,124.4 135.2,112.4 135.2,96.4 C135.2,80.4 130.2,68.6666667 120.2,61.2 C110.2,53.7333333 95.8666667,50 77.2,50 C71.0666667,50 65,50.2666667 59,50.8 C53,51.3333333 47.6,52 42.8,52.8 L42.8,144.4 L76,144.4 Z"></path>",
          "<path d="M223.2,76 C225.066667,75.4666667 227.733333,74.8666667 231.2,74.2 C234.666667,73.5333333 238.4,73.2 242.4,73.2 C250.133333,73.2 255.8,74.6666667 259.4,77.6 C263,80.5333333 264.8,85.6 264.8,92.8 L264.8,191.6 C264.8,207.066667 268.866667,218.066667 277,224.6 C285.133333,231.133333 296.4,234.4 310.8,234.4 C320.133333,234.4 328,233.466667 334.4,231.6 C340.8,229.733333 345.866667,227.733333 349.6,225.6 L349.6,76 C351.733333,75.4666667 354.466667,74.8666667 357.8,74.2 C361.133333,73.5333333 364.8,73.2 368.8,73.2 C376.533333,73.2 382.266667,74.6666667 386,77.6 C389.733333,80.5333333 391.6,85.6 391.6,92.8 L391.6,227.6 C391.6,233.466667 390.666667,238.266667 388.8,242 C386.933333,245.733333 383.2,249.333333 377.6,252.8 C370.666667,256.8 361.533333,260.4 350.2,263.6 C338.866667,266.8 325.6,268.4 310.4,268.4 C282.933333,268.4 261.533333,262.333333 246.2,250.2 C230.866667,238.066667 223.2,218.8 223.2,192.4 L223.2,76 Z"></path>",
          "<path d="M536,70 C548.533333,70 560.266667,72.0666667 571.2,76.2 C582.133333,80.3333333 591.6,86.4666667 599.6,94.6 C607.6,102.733333 613.866667,113 618.4,125.4 C622.933333,137.8 625.2,152.266667 625.2,168.8 C625.2,185.6 622.866667,200.266667 618.2,212.8 C613.533333,225.333333 606.933333,235.666667 598.4,243.8 C589.866667,251.933333 579.666667,258.066667 567.8,262.2 C555.933333,266.333333 542.8,268.4 528.4,268.4 C514,268.4 501.266667,266.666667 490.2,263.2 C479.133333,259.733333 470.133333,255.733333 463.2,251.2 C457.6,247.466667 453.6,243.733333 451.2,240 C448.8,236.266667 447.6,231.466667 447.6,225.6 L447.6,3.2 C449.466667,2.66666667 452.133333,2 455.6,1.2 C459.066667,0.4 462.8,-2.84217094e-14 466.8,-2.84217094e-14 C474.533333,-2.84217094e-14 480.2,1.46666667 483.8,4.4 C487.4,7.33333333 489.2,12.2666667 489.2,19.2 L489.2,82.4 C495.066667,79.2 501.866667,76.3333333 509.6,73.8 C517.333333,71.2666667 526.133333,70 536,70 Z M529.2,103.6 C520.666667,103.6 513.066667,105 506.4,107.8 C499.733333,110.6 494,113.866667 489.2,117.6 L489.2,224 C492.933333,226.666667 498.133333,229.066667 504.8,231.2 C511.466667,233.333333 519.2,234.4 528,234.4 C544.266667,234.4 557.466667,229.066667 567.6,218.4 C577.733333,207.733333 582.8,191.2 582.8,168.8 C582.8,146.133333 577.8,129.6 567.8,119.2 C557.8,108.8 544.933333,103.6 529.2,103.6 Z"></path>",
          "<path d="M719.2,153.2 L719.2,262.4 C717.066667,262.933333 714.266667,263.6 710.8,264.4 C707.333333,265.2 703.466667,265.6 699.2,265.6 C690.933333,265.6 685,264.066667 681.4,261 C677.8,257.933333 676,252.8 676,245.6 L676,20 C678.133333,19.4666667 681,18.8666667 684.6,18.2 C688.2,17.5333333 692,17.2 696,17.2 C703.733333,17.2 709.533333,18.6666667 713.4,21.6 C717.266667,24.5333333 719.2,29.7333333 719.2,37.2 L719.2,127.6 L822,18 C832.133333,18.2666667 839.466667,20.4666667 844,24.6 C848.533333,28.7333333 850.8,33.6 850.8,39.2 C850.8,43.7333333 849.6,47.9333333 847.2,51.8 C844.8,55.6666667 841.333333,59.8666667 836.8,64.4 L760.8,139.6 C782.933333,162.266667 802.333333,182.333333 819,199.8 C835.666667,217.266667 850,231.466667 862,242.4 C861.466667,249.866667 859,255.666667 854.6,259.8 C850.2,263.933333 844.933333,266 838.8,266 C832.4,266 827,264.266667 822.6,260.8 C818.2,257.333333 813.733333,253.333333 809.2,248.8 L719.2,153.2 Z"></path>",
          "<path d="M926.4,190.4 C930.133333,205.6 937.4,216.866667 948.2,224.2 C959,231.533333 972.8,235.2 989.6,235.2 C1000.8,235.2 1011.06667,233.466667 1020.4,230 C1029.73333,226.533333 1037.2,222.8 1042.8,218.8 C1050.26667,223.066667 1054,229.066667 1054,236.8 C1054,241.333333 1052.26667,245.533333 1048.8,249.4 C1045.33333,253.266667 1040.6,256.6 1034.6,259.4 C1028.6,262.2 1021.53333,264.4 1013.4,266 C1005.26667,267.6 996.533333,268.4 987.2,268.4 C971.733333,268.4 957.666667,266.266667 945,262 C932.333333,257.733333 921.466667,251.333333 912.4,242.8 C903.333333,234.266667 896.333333,223.733333 891.4,211.2 C886.466667,198.666667 884,184.133333 884,167.6 C884,151.6 886.4,137.533333 891.2,125.4 C896,113.266667 902.533333,103.133333 910.8,95 C919.066667,86.8666667 928.8,80.6666667 940,76.4 C951.2,72.1333333 963.2,70 976,70 C988.8,70 1000.46667,72.0666667 1011,76.2 C1021.53333,80.3333333 1030.6,86.0666667 1038.2,93.4 C1045.8,100.733333 1051.66667,109.466667 1055.8,119.6 C1059.93333,129.733333 1062,140.8 1062,152.8 C1062,159.466667 1060.4,164.333333 1057.2,167.4 C1054,170.466667 1049.33333,172.533333 1043.2,173.6 L926.4,190.4 Z M976,102.4 C961.333333,102.4 949.133333,107.333333 939.4,117.2 C929.666667,127.066667 924.533333,141.2 924,159.6 L1022.4,145.6 C1021.33333,133.6 1016.93333,123.4 1009.2,115 C1001.46667,106.6 990.4,102.4 976,102.4 Z"></path>",
          "<path d="M1138.8,219.2 C1132.13333,206.133333 1124,187.6 1114.4,163.6 C1104.8,139.6 1095.46667,112.4 1086.4,82 C1088.8,79.0666667 1092,76.6 1096,74.6 C1100,72.6 1104.26667,71.6 1108.8,71.6 C1114.66667,71.6 1119.46667,73 1123.2,75.8 C1126.93333,78.6 1130,83.4666667 1132.4,90.4 C1139.6,112 1147.06667,133.266667 1154.8,154.2 C1162.53333,175.133333 1171.06667,196.8 1180.4,219.2 L1182,219.2 C1186,210.666667 1190.06667,200.666667 1194.2,189.2 C1198.33333,177.733333 1202.4,165.6 1206.4,152.8 C1210.4,140 1214.13333,127 1217.6,113.8 C1221.06667,100.6 1224.13333,88 1226.8,76 C1229.46667,74.6666667 1232.2,73.6 1235,72.8 C1237.8,72 1241.06667,71.6 1244.8,71.6 C1250.66667,71.6 1255.6,73 1259.6,75.8 C1263.6,78.6 1265.6,82.9333333 1265.6,88.8 C1265.6,95.7333333 1263.8,106.333333 1260.2,120.6 C1256.6,134.866667 1251.86667,150.6 1246,167.8 C1240.13333,185 1233.46667,202.4 1226,220 C1218.53333,237.6 1211.06667,253.2 1203.6,266.8 C1190.26667,290.266667 1178.2,308.133333 1167.4,320.4 C1156.6,332.666667 1146.4,338.8 1136.8,338.8 C1129.33333,338.8 1123.4,336.733333 1119,332.6 C1114.6,328.466667 1111.86667,323.333333 1110.8,317.2 C1115.06667,313.466667 1119.73333,308.933333 1124.8,303.6 C1129.86667,298.266667 1134.93333,292.533333 1140,286.4 C1145.06667,280.266667 1149.86667,273.933333 1154.4,267.4 C1158.93333,260.866667 1162.8,254.533333 1166,248.4 C1161.46667,247.066667 1157.06667,244.466667 1152.8,240.6 C1148.53333,236.733333 1143.86667,229.6 1138.8,219.2 Z"></path>",
          "</g>",
          "</g>",
          "</g>",
          "</svg>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-logo-type-black.tsx",
      },
      "ui-logo-type-white.tsx": {
        "content": [
          "import { UiLogoTypeProps } from './ui-logo-type';",
          "export function UiLogoTypeWhite({",
          "height,",
          "width,",
          "...props",
          "}: UiLogoTypeProps = {}) {",
          "return (",
          "<svg",
          "height={height}",
          "width={width}",
          "viewBox="0 0 2048 512"",
          "version="1.1"",
          "{...props}",
          ">",
          "<g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">",
          "<g>",
          "<rect",
          "fill="#1C7ED6"",
          "x="0"",
          "y="0"",
          "width="512"",
          "height="512"",
          "rx="64"",
          "></rect>",
          "<g",
          "transform="translate(142.000000, 96.000000)"",
          "fill="#FFFFFF"",
          "fillRule="nonzero"",
          ">",
          "<path d="M55.296,210.432 L55.296,316.416 C52.5653333,317.44 48.9813333,318.378667 44.544,319.232 C40.1066667,320.085333 35.1573333,320.512 29.696,320.512 C19.1146667,320.512 11.52,318.549333 6.912,314.624 C2.304,310.698667 0,304.128 0,294.912 L0,30.72 C0,24.9173333 1.62133333,20.3946667 4.864,17.152 C8.10666667,13.9093333 12.6293333,11.4346667 18.432,9.728 C29.0133333,5.97333333 41.6426667,3.41333333 56.32,2.048 C70.9973333,0.682666667 84.8213333,-2.84217094e-14 97.792,-2.84217094e-14 C142.165333,-2.84217094e-14 175.018667,9.38666667 196.352,28.16 C217.685333,46.9333333 228.352,72.3626667 228.352,104.448 C228.352,136.533333 217.685333,162.218667 196.352,181.504 C175.018667,200.789333 143.189333,210.432 100.864,210.432 L55.296,210.432 Z M97.28,165.888 C120.832,165.888 139.349333,160.768 152.832,150.528 C166.314667,140.288 173.056,124.928 173.056,104.448 C173.056,83.968 166.656,68.9493333 153.856,59.392 C141.056,49.8346667 122.709333,45.056 98.816,45.056 C90.9653333,45.056 83.2,45.3973333 75.52,46.08 C67.84,46.7626667 60.928,47.616 54.784,48.64 L54.784,165.888 L97.28,165.888 Z"></path>",
          "</g>",
          "</g>",
          "<g",
          "transform="translate(661.800000, 106.200000)"",
          "fill="#FFFFFF"",
          "fillRule="nonzero"",
          ">",
          "<g transform="translate(0.000000, -0.000000)">",
          "<path d="M43.2,179.2 L43.2,262 C41.0666667,262.8 38.2666667,263.533333 34.8,264.2 C31.3333333,264.866667 27.4666667,265.2 23.2,265.2 C14.9333333,265.2 9,263.666667 5.4,260.6 C1.8,257.533333 0,252.4 0,245.2 L0,38.8 C0,34.2666667 1.26666667,30.7333333 3.8,28.2 C6.33333333,25.6666667 9.86666667,23.7333333 14.4,22.4 C22.6666667,19.4666667 32.5333333,17.4666667 44,16.4 C55.4666667,15.3333333 66.2666667,14.8 76.4,14.8 C111.066667,14.8 136.733333,22.1333333 153.4,36.8 C170.066667,51.4666667 178.4,71.3333333 178.4,96.4 C178.4,121.466667 170.066667,141.533333 153.4,156.6 C136.733333,171.666667 111.866667,179.2 78.8,179.2 L43.2,179.2 Z M76,144.4 C94.4,144.4 108.866667,140.4 119.4,132.4 C129.933333,124.4 135.2,112.4 135.2,96.4 C135.2,80.4 130.2,68.6666667 120.2,61.2 C110.2,53.7333333 95.8666667,50 77.2,50 C71.0666667,50 65,50.2666667 59,50.8 C53,51.3333333 47.6,52 42.8,52.8 L42.8,144.4 L76,144.4 Z"></path>",
          "<path d="M223.2,76 C225.066667,75.4666667 227.733333,74.8666667 231.2,74.2 C234.666667,73.5333333 238.4,73.2 242.4,73.2 C250.133333,73.2 255.8,74.6666667 259.4,77.6 C263,80.5333333 264.8,85.6 264.8,92.8 L264.8,191.6 C264.8,207.066667 268.866667,218.066667 277,224.6 C285.133333,231.133333 296.4,234.4 310.8,234.4 C320.133333,234.4 328,233.466667 334.4,231.6 C340.8,229.733333 345.866667,227.733333 349.6,225.6 L349.6,76 C351.733333,75.4666667 354.466667,74.8666667 357.8,74.2 C361.133333,73.5333333 364.8,73.2 368.8,73.2 C376.533333,73.2 382.266667,74.6666667 386,77.6 C389.733333,80.5333333 391.6,85.6 391.6,92.8 L391.6,227.6 C391.6,233.466667 390.666667,238.266667 388.8,242 C386.933333,245.733333 383.2,249.333333 377.6,252.8 C370.666667,256.8 361.533333,260.4 350.2,263.6 C338.866667,266.8 325.6,268.4 310.4,268.4 C282.933333,268.4 261.533333,262.333333 246.2,250.2 C230.866667,238.066667 223.2,218.8 223.2,192.4 L223.2,76 Z"></path>",
          "<path d="M536,70 C548.533333,70 560.266667,72.0666667 571.2,76.2 C582.133333,80.3333333 591.6,86.4666667 599.6,94.6 C607.6,102.733333 613.866667,113 618.4,125.4 C622.933333,137.8 625.2,152.266667 625.2,168.8 C625.2,185.6 622.866667,200.266667 618.2,212.8 C613.533333,225.333333 606.933333,235.666667 598.4,243.8 C589.866667,251.933333 579.666667,258.066667 567.8,262.2 C555.933333,266.333333 542.8,268.4 528.4,268.4 C514,268.4 501.266667,266.666667 490.2,263.2 C479.133333,259.733333 470.133333,255.733333 463.2,251.2 C457.6,247.466667 453.6,243.733333 451.2,240 C448.8,236.266667 447.6,231.466667 447.6,225.6 L447.6,3.2 C449.466667,2.66666667 452.133333,2 455.6,1.2 C459.066667,0.4 462.8,-2.84217094e-14 466.8,-2.84217094e-14 C474.533333,-2.84217094e-14 480.2,1.46666667 483.8,4.4 C487.4,7.33333333 489.2,12.2666667 489.2,19.2 L489.2,82.4 C495.066667,79.2 501.866667,76.3333333 509.6,73.8 C517.333333,71.2666667 526.133333,70 536,70 Z M529.2,103.6 C520.666667,103.6 513.066667,105 506.4,107.8 C499.733333,110.6 494,113.866667 489.2,117.6 L489.2,224 C492.933333,226.666667 498.133333,229.066667 504.8,231.2 C511.466667,233.333333 519.2,234.4 528,234.4 C544.266667,234.4 557.466667,229.066667 567.6,218.4 C577.733333,207.733333 582.8,191.2 582.8,168.8 C582.8,146.133333 577.8,129.6 567.8,119.2 C557.8,108.8 544.933333,103.6 529.2,103.6 Z"></path>",
          "<path d="M719.2,153.2 L719.2,262.4 C717.066667,262.933333 714.266667,263.6 710.8,264.4 C707.333333,265.2 703.466667,265.6 699.2,265.6 C690.933333,265.6 685,264.066667 681.4,261 C677.8,257.933333 676,252.8 676,245.6 L676,20 C678.133333,19.4666667 681,18.8666667 684.6,18.2 C688.2,17.5333333 692,17.2 696,17.2 C703.733333,17.2 709.533333,18.6666667 713.4,21.6 C717.266667,24.5333333 719.2,29.7333333 719.2,37.2 L719.2,127.6 L822,18 C832.133333,18.2666667 839.466667,20.4666667 844,24.6 C848.533333,28.7333333 850.8,33.6 850.8,39.2 C850.8,43.7333333 849.6,47.9333333 847.2,51.8 C844.8,55.6666667 841.333333,59.8666667 836.8,64.4 L760.8,139.6 C782.933333,162.266667 802.333333,182.333333 819,199.8 C835.666667,217.266667 850,231.466667 862,242.4 C861.466667,249.866667 859,255.666667 854.6,259.8 C850.2,263.933333 844.933333,266 838.8,266 C832.4,266 827,264.266667 822.6,260.8 C818.2,257.333333 813.733333,253.333333 809.2,248.8 L719.2,153.2 Z"></path>",
          "<path d="M926.4,190.4 C930.133333,205.6 937.4,216.866667 948.2,224.2 C959,231.533333 972.8,235.2 989.6,235.2 C1000.8,235.2 1011.06667,233.466667 1020.4,230 C1029.73333,226.533333 1037.2,222.8 1042.8,218.8 C1050.26667,223.066667 1054,229.066667 1054,236.8 C1054,241.333333 1052.26667,245.533333 1048.8,249.4 C1045.33333,253.266667 1040.6,256.6 1034.6,259.4 C1028.6,262.2 1021.53333,264.4 1013.4,266 C1005.26667,267.6 996.533333,268.4 987.2,268.4 C971.733333,268.4 957.666667,266.266667 945,262 C932.333333,257.733333 921.466667,251.333333 912.4,242.8 C903.333333,234.266667 896.333333,223.733333 891.4,211.2 C886.466667,198.666667 884,184.133333 884,167.6 C884,151.6 886.4,137.533333 891.2,125.4 C896,113.266667 902.533333,103.133333 910.8,95 C919.066667,86.8666667 928.8,80.6666667 940,76.4 C951.2,72.1333333 963.2,70 976,70 C988.8,70 1000.46667,72.0666667 1011,76.2 C1021.53333,80.3333333 1030.6,86.0666667 1038.2,93.4 C1045.8,100.733333 1051.66667,109.466667 1055.8,119.6 C1059.93333,129.733333 1062,140.8 1062,152.8 C1062,159.466667 1060.4,164.333333 1057.2,167.4 C1054,170.466667 1049.33333,172.533333 1043.2,173.6 L926.4,190.4 Z M976,102.4 C961.333333,102.4 949.133333,107.333333 939.4,117.2 C929.666667,127.066667 924.533333,141.2 924,159.6 L1022.4,145.6 C1021.33333,133.6 1016.93333,123.4 1009.2,115 C1001.46667,106.6 990.4,102.4 976,102.4 Z"></path>",
          "<path d="M1138.8,219.2 C1132.13333,206.133333 1124,187.6 1114.4,163.6 C1104.8,139.6 1095.46667,112.4 1086.4,82 C1088.8,79.0666667 1092,76.6 1096,74.6 C1100,72.6 1104.26667,71.6 1108.8,71.6 C1114.66667,71.6 1119.46667,73 1123.2,75.8 C1126.93333,78.6 1130,83.4666667 1132.4,90.4 C1139.6,112 1147.06667,133.266667 1154.8,154.2 C1162.53333,175.133333 1171.06667,196.8 1180.4,219.2 L1182,219.2 C1186,210.666667 1190.06667,200.666667 1194.2,189.2 C1198.33333,177.733333 1202.4,165.6 1206.4,152.8 C1210.4,140 1214.13333,127 1217.6,113.8 C1221.06667,100.6 1224.13333,88 1226.8,76 C1229.46667,74.6666667 1232.2,73.6 1235,72.8 C1237.8,72 1241.06667,71.6 1244.8,71.6 C1250.66667,71.6 1255.6,73 1259.6,75.8 C1263.6,78.6 1265.6,82.9333333 1265.6,88.8 C1265.6,95.7333333 1263.8,106.333333 1260.2,120.6 C1256.6,134.866667 1251.86667,150.6 1246,167.8 C1240.13333,185 1233.46667,202.4 1226,220 C1218.53333,237.6 1211.06667,253.2 1203.6,266.8 C1190.26667,290.266667 1178.2,308.133333 1167.4,320.4 C1156.6,332.666667 1146.4,338.8 1136.8,338.8 C1129.33333,338.8 1123.4,336.733333 1119,332.6 C1114.6,328.466667 1111.86667,323.333333 1110.8,317.2 C1115.06667,313.466667 1119.73333,308.933333 1124.8,303.6 C1129.86667,298.266667 1134.93333,292.533333 1140,286.4 C1145.06667,280.266667 1149.86667,273.933333 1154.4,267.4 C1158.93333,260.866667 1162.8,254.533333 1166,248.4 C1161.46667,247.066667 1157.06667,244.466667 1152.8,240.6 C1148.53333,236.733333 1143.86667,229.6 1138.8,219.2 Z"></path>",
          "</g>",
          "</g>",
          "</g>",
          "</svg>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-logo-type-white.tsx",
      },
      "ui-logo-type.tsx": {
        "content": [
          "import { useUiColorScheme } from '../ui-theme';",
          "import { SVGProps } from 'react';",
          "import { UiLogoTypeBlack } from './ui-logo-type-black';",
          "import { UiLogoTypeWhite } from './ui-logo-type-white';",
          "export interface UiLogoTypeProps extends SVGProps<SVGSVGElement> {",
          "height?: number;",
          "width?: number;",
          "}",
          "export function UiLogoType(props: UiLogoTypeProps = {}) {",
          "const { colorScheme } = useUiColorScheme();",
          "return colorScheme === 'dark' ? (",
          "<UiLogoTypeWhite {...props} />",
          ") : (",
          "<UiLogoTypeBlack {...props} />",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-logo-type.tsx",
      },
      "ui-logo.tsx": {
        "content": [
          "import { UiLogoTypeProps } from './ui-logo-type';",
          "export function UiLogo({ height, width, ...props }: UiLogoTypeProps = {}) {",
          "return (",
          "<svg",
          "height={height}",
          "width={width}",
          "viewBox="0 0 512 512"",
          "version="1.1"",
          "{...props}",
          ">",
          "<rect fill="#1C7ED6" x="0" y="0" width="512" height="512" rx="64"></rect>",
          "<g",
          "transform="translate(142.000000, 96.000000)"",
          "fill="#FFFFFF"",
          "fillRule="nonzero"",
          ">",
          "<path d="M55.296,210.432 L55.296,316.416 C52.5653333,317.44 48.9813333,318.378667 44.544,319.232 C40.1066667,320.085333 35.1573333,320.512 29.696,320.512 C19.1146667,320.512 11.52,318.549333 6.912,314.624 C2.304,310.698667 0,304.128 0,294.912 L0,30.72 C0,24.9173333 1.62133333,20.3946667 4.864,17.152 C8.10666667,13.9093333 12.6293333,11.4346667 18.432,9.728 C29.0133333,5.97333333 41.6426667,3.41333333 56.32,2.048 C70.9973333,0.682666667 84.8213333,-5.68434189e-14 97.792,-5.68434189e-14 C142.165333,-5.68434189e-14 175.018667,9.38666667 196.352,28.16 C217.685333,46.9333333 228.352,72.3626667 228.352,104.448 C228.352,136.533333 217.685333,162.218667 196.352,181.504 C175.018667,200.789333 143.189333,210.432 100.864,210.432 L55.296,210.432 Z M97.28,165.888 C120.832,165.888 139.349333,160.768 152.832,150.528 C166.314667,140.288 173.056,124.928 173.056,104.448 C173.056,83.968 166.656,68.9493333 153.856,59.392 C141.056,49.8346667 122.709333,45.056 98.816,45.056 C90.9653333,45.056 83.2,45.3973333 75.52,46.08 C67.84,46.7626667 60.928,47.616 54.784,48.64 L54.784,165.888 L97.28,165.888 Z"></path>",
          "</g>",
          "</svg>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-logo.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for menu 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-menu';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-menu.tsx": {
        "content": [
          "import { ActionIcon, Menu, MenuItemProps, MenuProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "export interface UiMenuItem extends MenuItemProps {",
          "label: string;",
          "type: 'label' | 'divider' | 'item';",
          "onClick?: () => void;",
          "}",
          "export interface UiMenuProps extends MenuProps {",
          "items: UiMenuItem[];",
          "icon: ReactNode;",
          "}",
          "export function UiMenu({ items, icon, ...props }: UiMenuProps) {",
          "return (",
          "<Menu shadow="md" width={200} {...props}>",
          "<Menu.Target>",
          "<ActionIcon radius="xl" size="lg" variant="default">",
          "{icon}",
          "</ActionIcon>",
          "</Menu.Target>",
          "<Menu.Dropdown>",
          "{items.map(({ label, type, ...item }) => {",
          "switch (type) {",
          "case 'label':",
          "return <Menu.Label key={label}>{label}</Menu.Label>;",
          "case 'divider':",
          "return <Menu.Divider key={label} />;",
          "default:",
          "return (",
          "<Menu.Item key={label} {...item}>",
          "{label}",
          "</Menu.Item>",
          ");",
          "}",
          "})}",
          "</Menu.Dropdown>",
          "</Menu>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-menu.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for not-found 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-not-found';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-not-found.module.css": {
        "content": [
          ".root {",
          "padding-top: rem(80px);",
          "padding-bottom: rem(80px);",
          "}",
          ".label {",
          "text-align: center;",
          "font-weight: 900;",
          "font-size: rem(38px);",
          "line-height: 1;",
          "margin-bottom: calc(1.5 * var(--mantine-spacing-xl));",
          "color: var(--mantine-color-gray-2);",
          "@media (max-width: $mantine-breakpoint-sm) {",
          "font-size: rem(32px);",
          "}",
          "}",
          ".description {",
          "max-width: rem(500px);",
          "margin: auto;",
          "margin-top: var(--mantine-spacing-xl);",
          "margin-bottom: calc(1.5 * var(--mantine-spacing-xl));",
          "}",
          ".title {",
          "text-align: center;",
          "font-weight: 900;",
          "font-size: rem(38px);",
          "@media (max-width: $mantine-breakpoint-sm) {",
          "font-size: rem(32px);",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-not-found.module.css",
      },
      "ui-not-found.tsx": {
        "content": [
          "import { Button, Container, Group, Text, Title } from '@mantine/core';",
          "import { useUiTheme } from '../ui-theme';",
          "import classes from './ui-not-found.module.css';",
          "export function UiNotFound({ to = '/' }: { to?: string }) {",
          "const { Link } = useUiTheme();",
          "return (",
          "<Container className={classes.root}>",
          "<div className={classes.label}>404</div>",
          "<Title className={classes.title}>You have found a secret place.</Title>",
          "<Text c="dimmed" size="lg" ta="center" className={classes.description}>",
          "Unfortunately, this is only a 404 page. You may have mistyped the",
          "address, or the page has been moved to another URL.",
          "</Text>",
          "<Group justify="center">",
          "<Button variant="subtle" size="md" component={Link} to={to}>",
          "Take me back!",
          "</Button>",
          "</Group>",
          "</Container>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-not-found.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for page 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-page';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-page.tsx": {
        "content": [
          "import { Box, Group, Title } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "import { UiContainer } from '../ui-container';",
          "import { UiGroup } from '../ui-group';",
          "import { UiStack } from '../ui-stack';",
          "export function UiPage({",
          "children,",
          "leftAction,",
          "rightAction,",
          "title,",
          "}: {",
          "children: ReactNode;",
          "leftAction?: ReactNode;",
          "rightAction?: ReactNode;",
          "title?: ReactNode;",
          "}) {",
          "return (",
          "<UiContainer>",
          "<UiStack>",
          "<Box>",
          "<UiGroup>",
          "<Group>",
          "{leftAction ? leftAction : null}",
          "<Title order={2}>{title ?? ''}</Title>",
          "</Group>",
          "{rightAction ? <Group>{rightAction}</Group> : null}",
          "</UiGroup>",
          "</Box>",
          "<UiStack my="xs" gap="xl">",
          "{children}",
          "</UiStack>",
          "</UiStack>",
          "</UiContainer>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-page.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for search-input 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-search-input';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-search-input.tsx": {
        "content": [
          "import {",
          "ActionIcon,",
          "ActionIconProps,",
          "rem,",
          "TextInput,",
          "TextInputProps,",
          "useMantineTheme,",
          "} from '@mantine/core';",
          "import { IconArrowRight, IconSearch } from '@tabler/icons-react';",
          "export function UiSearchInput({",
          "...props",
          "}: {",
          "icon?: ActionIconProps;",
          "text?: TextInputProps;",
          "} = {}) {",
          "const theme = useMantineTheme();",
          "return (",
          "<TextInput",
          "leftSection={",
          "<IconSearch style={{ width: rem(18), height: rem(18) }} stroke={1.5} />",
          "}",
          "rightSection={",
          "<ActionIcon",
          "size={32}",
          "radius="xl"",
          "color={theme.primaryColor}",
          "variant="filled"",
          "{...props.icon}",
          ">",
          "<IconArrowRight",
          "style={{ width: rem(18), height: rem(18) }}",
          "stroke={1.5}",
          "/>",
          "</ActionIcon>",
          "}",
          "radius="xl"",
          "variant="filled"",
          "size="md"",
          "placeholder="Search"",
          "{...props.text}",
          "/>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-search-input.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for select-enum 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-select-enum';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-select-enum.tsx": {
        "content": [
          "import {",
          "MultiSelect,",
          "MultiSelectProps,",
          "Select,",
          "SelectProps,",
          "} from '@mantine/core';",
          "export function UiMultiSelectEnum<T>({",
          "values,",
          "setValues,",
          "options,",
          "...props",
          "}: MultiSelectProps & {",
          "values: T[] | undefined;",
          "setValues: (values: T[] | undefined) => void;",
          "options: { value: string; label: string }[];",
          "}) {",
          "return (",
          "<MultiSelect",
          "value={values?.map((v) => \`\${v}\`) ?? []}",
          "onChange={(values) => setValues(values.map((v) => v as T))}",
          "data={options}",
          "{...props}",
          "/>",
          ");",
          "}",
          "export function UiSelectEnum<T>({",
          "value,",
          "setValue,",
          "options,",
          "...props",
          "}: SelectProps & {",
          "value: T | undefined;",
          "setValue: (value: T | undefined) => void;",
          "options: { value: string; label: string }[];",
          "}) {",
          "return (",
          "<Select",
          "value={value?.toString() ?? ''}",
          "onChange={(value) => setValue(value === '' ? undefined : (value as T))}",
          "data={options}",
          "{...props}",
          "/>",
          ");",
          "}",
          "export function getEnumOptions<T extends Record<string, string>>(",
          "enumObject: T",
          "): { label: string; value: T[keyof T] }[] {",
          "return Object.keys(enumObject).map((key: string) => ({",
          "label: key,",
          "value: enumObject[key as keyof T],",
          "}));",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-select-enum.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for stack 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-stack';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-stack.tsx": {
        "content": [
          "import { Stack, StackProps } from '@mantine/core';",
          "import { ReactNode } from 'react';",
          "import { useUiBreakpoints } from '../ui-theme';",
          "export interface UiStackProps extends StackProps {",
          "children: ReactNode;",
          "}",
          "export function UiStack({ children, ...props }: UiStackProps) {",
          "const { isSm } = useUiBreakpoints();",
          "return (",
          "<Stack gap={isSm ? 'xs' : 'md'} {...props}>",
          "{children}",
          "</Stack>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-stack.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for tab-routes 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-tab-routes';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-tab-routes.tsx": {
        "content": [
          "import { Box, Tabs, TabsProps, Text } from '@mantine/core';",
          "import { ReactElement, ReactNode, Suspense } from 'react';",
          "import {",
          "Navigate,",
          "Route,",
          "Routes,",
          "useLocation,",
          "useNavigate,",
          "} from 'react-router-dom';",
          "import { UiLoader } from '../ui-loader';",
          "export interface UiTabRoute {",
          "element: ReactNode;",
          "label: ReactElement | string;",
          "path: string;",
          "}",
          "export function UiTabRoutes({",
          "grow = false,",
          "tabs,",
          "basePath,",
          "...props",
          "}: Omit<TabsProps, 'children'> & {",
          "children?: ReactNode;",
          "basePath?: string;",
          "grow?: boolean;",
          "tabs: UiTabRoute[];",
          "}) {",
          "const navigate = useNavigate();",
          "const location = useLocation();",
          "// Set the active tab based on matching the location pathname with the tab path",
          "const activeTab = tabs.find((tab) =>",
          "location.pathname.includes(\`/\${tab.path}\`)",
          ")?.path;",
          "// Set default redirect route to the first tab",
          "const redirect =",
          "tabs.length && tabs[0].path !== '' ? tabs[0].path : undefined;",
          "return (",
          "<Box>",
          "<Tabs",
          "value={activeTab}",
          "onChange={(value) =>",
          "navigate(\`\${basePath ? \`\${basePath}/\${value}\` : value}\`)",
          "}",
          "mb="md"",
          "{...props}",
          ">",
          "<Tabs.List grow={grow}>",
          "{tabs.map((tab) => (",
          "<Tabs.Tab key={tab.path} value={tab.path}>",
          "<Text>{tab.label}</Text>",
          "</Tabs.Tab>",
          "))}",
          "</Tabs.List>",
          "</Tabs>",
          "<Suspense fallback={<UiLoader />}>",
          "<Routes>",
          "{redirect ? (",
          "<Route index element={<Navigate replace to={\`./\${redirect}\`} />} />",
          ") : null}",
          "{tabs.map((tab) => (",
          "<Route",
          "key={tab.path}",
          "path={\`\${tab.path}/*\`}",
          "element={tab.element}",
          "/>",
          "))}",
          "<Route path="*" element={<Navigate replace to={\`./\${redirect}\`} />} />",
          "</Routes>",
          "</Suspense>",
          "</Box>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-tab-routes.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for theme 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-color-scheme-provider';",
          "export * from './ui-theme-provider';",
          "export * from './use-ui-breakpoints';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-color-scheme-provider.tsx": {
        "content": [
          "import {",
          "MantineColorScheme,",
          "useComputedColorScheme,",
          "useMantineColorScheme,",
          "} from '@mantine/core';",
          "import { useHotkeys } from '@mantine/hooks';",
          "import { createContext, ReactNode, useContext } from 'react';",
          "export interface UiColorSchemeProviderContext {",
          "colorScheme: MantineColorScheme;",
          "toggleColorScheme: (colorScheme?: MantineColorScheme) => void;",
          "}",
          "const Context = createContext<UiColorSchemeProviderContext>(",
          "{} as UiColorSchemeProviderContext",
          ");",
          "export function UiColorSchemeProvider({ children }: { children: ReactNode }) {",
          "const { toggleColorScheme } = useMantineColorScheme();",
          "const colorScheme = useComputedColorScheme('dark', {",
          "getInitialValueInEffect: true,",
          "});",
          "useHotkeys([['mod+J', () => toggleColorScheme()]]);",
          "const value: UiColorSchemeProviderContext = {",
          "colorScheme,",
          "toggleColorScheme,",
          "};",
          "return <Context.Provider value={value}>{children}</Context.Provider>;",
          "}",
          "export function useUiColorScheme() {",
          "return useContext(Context);",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-color-scheme-provider.tsx",
      },
      "ui-theme-provider.tsx": {
        "content": [
          "import {",
          "ColorSchemeScript,",
          "createTheme,",
          "DEFAULT_THEME,",
          "Loader,",
          "MantineProvider,",
          "MantineThemeOverride,",
          "} from '@mantine/core';",
          "import { ModalsProvider } from '@mantine/modals';",
          "import { Notifications } from '@mantine/notifications';",
          "import {",
          "createContext,",
          "FunctionComponent,",
          "ReactNode,",
          "Suspense,",
          "useContext,",
          "} from 'react';",
          "import { UiColorSchemeProvider } from './ui-color-scheme-provider';",
          "// Import the mantine theme styles",
          "import './ui-theme-styles';",
          "const defaultTheme = createTheme({",
          "colors: {",
          "brand: DEFAULT_THEME.colors.blue,",
          "},",
          "primaryColor: 'brand',",
          "});",
          "export type UiThemeLink = FunctionComponent<{",
          "children: ReactNode;",
          "to: string;",
          "target?: HTMLAnchorElement['target'];",
          "rel?: HTMLAnchorElement['rel'];",
          "}>;",
          "export const defaultUiThemeLink: UiThemeLink = ({ children, ...props }) => (",
          "<a href={props.to} {...props}>",
          "{children}",
          "</a>",
          ");",
          "export interface UiThemeProviderOptions {",
          "children: ReactNode;",
          "link?: UiThemeLink;",
          "theme?: MantineThemeOverride;",
          "}",
          "export interface UiThemeProviderContext {",
          "Link: UiThemeLink;",
          "}",
          "const Context = createContext<UiThemeProviderContext>(",
          "{} as UiThemeProviderContext",
          ");",
          "export function UiThemeProvider({",
          "children,",
          "link,",
          "theme,",
          "}: UiThemeProviderOptions) {",
          "const value: UiThemeProviderContext = {",
          "Link: link ?? defaultUiThemeLink,",
          "};",
          "return (",
          "<Context.Provider value={value}>",
          "<ColorSchemeScript defaultColorScheme="auto" />",
          "<MantineProvider theme={theme ?? defaultTheme} defaultColorScheme="auto">",
          "<UiColorSchemeProvider>",
          "<ModalsProvider>",
          "<Notifications />",
          "<Suspense fallback={<Loader />}>{children}</Suspense>",
          "</ModalsProvider>",
          "</UiColorSchemeProvider>",
          "</MantineProvider>",
          "</Context.Provider>",
          ");",
          "}",
          "export function useUiTheme() {",
          "return useContext(Context);",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-theme-provider.tsx",
      },
      "ui-theme-styles.ts": {
        "content": [
          "// Core styles",
          "import '@mantine/core/styles.css';",
          "// Package styles",
          "import '@mantine/dates/styles.css';",
          "import '@mantine/notifications/styles.css';",
        ],
        "isBinary": false,
        "path": "./test/ui-theme-styles.ts",
      },
      "use-ui-breakpoints.ts": {
        "content": [
          "import { useMantineTheme } from '@mantine/core';",
          "import { useMediaQuery } from '@mantine/hooks';",
          "export function useUiBreakpoints() {",
          "const { breakpoints } = useMantineTheme();",
          "const isSm = useMediaQuery(\`(max-width: \${breakpoints.sm})\`);",
          "const isMd = useMediaQuery(\`(max-width: \${breakpoints.md})\`);",
          "return {",
          "isSm: isSm ?? false,",
          "isMd: isMd ?? false,",
          "};",
          "}",
        ],
        "isBinary": false,
        "path": "./test/use-ui-breakpoints.ts",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for theme-select 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-theme-select-colors';",
          "export * from './ui-theme-select-provider';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-theme-select-colors.ts": {
        "content": [
          "import { DEFAULT_THEME, MantineColor, MantineColorsTuple } from '@mantine/core';",
          "export const MANTINE_COLORS = DEFAULT_THEME.colors;",
          "export type BackgroundColors = 'gray' | 'neutral' | 'slate' | 'stone' | 'zinc';",
          "// https://unpkg.com/browse/tailwindcss@3.4.1/lib/public/colors.js",
          "export const BACKGROUND_COLORS: Record<BackgroundColors, MantineColorsTuple> = {",
          "gray: [",
          "// '#f9fafb',",
          "'#f3f4f6',",
          "'#e5e7eb',",
          "'#d1d5db',",
          "'#9ca3af',",
          "'#6b7280',",
          "'#4b5563',",
          "'#374151',",
          "'#1f2937',",
          "'#111827',",
          "'#030712',",
          "],",
          "neutral: [",
          "// '#fafafa',",
          "'#f5f5f5',",
          "'#e5e5e5',",
          "'#d4d4d4',",
          "'#a3a3a3',",
          "'#737373',",
          "'#525252',",
          "'#404040',",
          "'#262626',",
          "'#171717',",
          "'#0a0a0a',",
          "],",
          "slate: [",
          "// "#f8fafc",",
          "'#f1f5f9',",
          "'#e2e8f0',",
          "'#cbd5e1',",
          "'#94a3b8',",
          "'#64748b',",
          "'#475569',",
          "'#334155',",
          "'#1e293b',",
          "'#0f172a',",
          "'#020617',",
          "],",
          "stone: [",
          "// '#fafaf9',",
          "'#f5f5f4',",
          "'#e7e5e4',",
          "'#d6d3d1',",
          "'#a8a29e',",
          "'#78716c',",
          "'#57534e',",
          "'#44403c',",
          "'#292524',",
          "'#1c1917',",
          "'#0c0a09',",
          "],",
          "zinc: [",
          "// '#fafafa',",
          "'#f4f4f5',",
          "'#e4e4e7',",
          "'#d4d4d8',",
          "'#a1a1aa',",
          "'#71717a',",
          "'#52525b',",
          "'#3f3f46',",
          "'#27272a',",
          "'#18181b',",
          "'#09090b',",
          "],",
          "};",
          "export const backgroundColorIds: BackgroundColors[] = [",
          "'gray',",
          "'neutral',",
          "'slate',",
          "'stone',",
          "'zinc',",
          "] as const;",
          "export const mantineColorIds: MantineColor[] = [",
          "'blue',",
          "'red',",
          "'pink',",
          "'grape',",
          "'violet',",
          "'indigo',",
          "'cyan',",
          "'green',",
          "'lime',",
          "'yellow',",
          "'orange',",
          "'teal',",
          "] as const;",
        ],
        "isBinary": false,
        "path": "./test/ui-theme-select-colors.ts",
      },
      "ui-theme-select-provider.tsx": {
        "content": [
          "import {",
          "Button,",
          "createTheme,",
          "MantineColor,",
          "MantineThemeOverride,",
          "Menu,",
          "} from '@mantine/core';",
          "import { UiThemeProvider, UiThemeProviderOptions } from '../ui-theme';",
          "import { createContext, useContext, useMemo, useState } from 'react';",
          "import { MANTINE_COLORS } from './ui-theme-select-colors';",
          "export type UiTheme = { id: string; theme: MantineThemeOverride };",
          "export function themeWithBrand(",
          "color: MantineColor,",
          "override: MantineThemeOverride = {}",
          "): MantineThemeOverride {",
          "return {",
          "...override,",
          "colors: {",
          "...override.colors,",
          "brand: MANTINE_COLORS[color],",
          "},",
          "primaryColor: 'brand',",
          "};",
          "}",
          "export const defaultThemes: UiTheme[] = [",
          "{ id: 'brand', theme: themeWithBrand('blue') },",
          "];",
          "export interface UiThemeSelectProviderContext {",
          "themes: UiTheme[];",
          "selected: UiTheme;",
          "compiled: MantineThemeOverride;",
          "selectTheme: (themeId: string) => void;",
          "}",
          "const Context = createContext<UiThemeSelectProviderContext>(",
          "{} as UiThemeSelectProviderContext",
          ");",
          "export function UiThemeSelectProvider({",
          "children,",
          "theme,",
          "...props",
          "}: UiThemeProviderOptions & { theme?: UiTheme; themes?: UiTheme[] }) {",
          "const themes = useMemo(() => props.themes ?? defaultThemes, [props.themes]);",
          "const [selectedId, setSelectedId] = useState(themes[0].id);",
          "const themeId = useMemo(",
          "() => (theme?.id ? theme.id : selectedId),",
          "[theme, selectedId]",
          ");",
          "const selected = useMemo(",
          "() => themes.find((t) => t.id === themeId) ?? themes[0],",
          "[themes, themeId]",
          ");",
          "const compiled = useMemo(() => createTheme(selected.theme), [selected.theme]);",
          "const value: UiThemeSelectProviderContext = {",
          "themes,",
          "selected: selected,",
          "compiled,",
          "selectTheme: (themeId: string) => {",
          "if (themes.find((t) => t.id === themeId)) {",
          "setSelectedId(themeId);",
          "return;",
          "}",
          "console.warn(\`Theme \${themeId} not found\`);",
          "},",
          "};",
          "return (",
          "<Context.Provider value={value}>",
          "<NestUiTheme {...props}>{children}</NestUiTheme>",
          "</Context.Provider>",
          ");",
          "}",
          "export function useUiThemeSelect() {",
          "return useContext(Context);",
          "}",
          "export function UiThemeSelect() {",
          "const { themes, selected, selectTheme } = useUiThemeSelect();",
          "return (",
          "<Menu shadow="md" width={200}>",
          "<Menu.Target>",
          "<Button>{selected.id}</Button>",
          "</Menu.Target>",
          "<Menu.Dropdown>",
          "{themes.map((item) => (",
          "<Menu.Item key={item.id} onClick={() => selectTheme(item.id)}>",
          "{item.id}",
          "</Menu.Item>",
          "))}",
          "</Menu.Dropdown>",
          "</Menu>",
          ");",
          "}",
          "function NestUiTheme({ children, ...props }: UiThemeProviderOptions) {",
          "const { compiled } = useUiThemeSelect();",
          "return (",
          "<UiThemeProvider theme={compiled} {...props}>",
          "{children}",
          "</UiThemeProvider>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-theme-select-provider.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for theme-switch 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-theme-switch';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-theme-switch.tsx": {
        "content": [
          "import { rem, Switch, SwitchProps, useMantineTheme } from '@mantine/core';",
          "import { IconMoonStars, IconSun } from '@tabler/icons-react';",
          "import { useUiColorScheme } from '../ui-theme';",
          "export function UiThemeSwitch(props: SwitchProps) {",
          "const theme = useMantineTheme();",
          "const sunIcon = (",
          "<IconSun",
          "style={{ width: rem(16), height: rem(16) }}",
          "stroke={2.5}",
          "color={theme.colors.yellow[4]}",
          "/>",
          ");",
          "const moonIcon = (",
          "<IconMoonStars",
          "style={{ width: rem(16), height: rem(16) }}",
          "stroke={2.5}",
          "color={theme.colors.brand[6]}",
          "/>",
          ");",
          "const { toggleColorScheme, colorScheme } = useUiColorScheme();",
          "return (",
          "<Switch",
          "size="lg"",
          "color="dark.8"",
          "onLabel={sunIcon}",
          "offLabel={moonIcon}",
          "onChange={() => toggleColorScheme()}",
          "checked={colorScheme === 'dark'}",
          "{...props}",
          "/>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-theme-switch.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for time 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-time';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-time.tsx": {
        "content": [
          "import { Text, TextProps } from '@mantine/core';",
          "import TimeAgo from 'timeago-react';",
          "export interface UiTimeProps extends TextProps {",
          "date: Date;",
          "prefix?: string;",
          "suffix?: string;",
          "}",
          "export function UiTime({ date, prefix, suffix, ...props }: UiTimeProps) {",
          "return (",
          "<Text {...props} title={date.toISOString()}>",
          "{prefix}",
          "<TimeAgo datetime={date} locale="en_US" />",
          "{suffix}",
          "</Text>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-time.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`component generator should create files for toast 1`] = `
{
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": { "defaultBase": "main" },",
      ""targetDefaults": { "build": { "cache": true }, "lint": { "cache": true } }",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {},",
      ""devDependencies": {}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test": {
    "children": {
      "index.ts": {
        "content": [
          "export * from './ui-toast';",
        ],
        "isBinary": false,
        "path": "./test/index.ts",
      },
      "ui-toast.tsx": {
        "content": [
          "import { NotificationData, notifications } from '@mantine/notifications';",
          "export type ToastProps = string | NotificationData;",
          "export function toastSuccess(notification: ToastProps) {",
          "notification =",
          "typeof notification === 'string' ? { message: notification } : notification;",
          "notifications.show({",
          "color: notification?.color ?? 'green',",
          "title: notification?.title ?? 'Success',",
          "message: notification?.message,",
          "});",
          "}",
          "export function toastError(notification: ToastProps) {",
          "notification =",
          "typeof notification === 'string' ? { message: notification } : notification;",
          "notifications.show({",
          "color: notification?.color ?? 'red',",
          "title: notification?.title ?? 'Error',",
          "message: notification?.message,",
          "});",
          "}",
          "export function toastWarning(notification: ToastProps) {",
          "notification =",
          "typeof notification === 'string' ? { message: notification } : notification;",
          "notifications.show({",
          "color: notification?.color ?? 'yellow',",
          "title: notification?.title ?? 'Warning',",
          "message: notification?.message,",
          "});",
          "}",
          "export function toastInfo(notification: ToastProps) {",
          "notification =",
          "typeof notification === 'string' ? { message: notification } : notification;",
          "notifications.show({",
          "color: notification?.color ?? 'cyan',",
          "title: notification?.title ?? 'Info',",
          "message: notification?.message,",
          "});",
          "}",
        ],
        "isBinary": false,
        "path": "./test/ui-toast.tsx",
      },
    },
    "path": "./test",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;
